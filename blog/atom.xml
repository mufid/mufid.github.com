<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mufid's Code blog]]></title>
  <link href="http://mufid.github.io/atom.xml" rel="self"/>
  <link href="http://mufid.github.io/"/>
  <updated>2017-08-06T05:07:18+00:00</updated>
  <id>http://mufid.github.io/</id>
  <author>
    <name><![CDATA[Mufid]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Thermofidz: Membaca Temperatur dengan Raspberry PI]]></title>
    <link href="http://mufid.github.io/blog/2017/thermofidz/"/>
    <updated>2017-02-07T15:30:00+00:00</updated>
    <id>http://mufid.github.io/blog/2017/thermofidz</id>
    <content type="html"><![CDATA[<h2>Latar Belakang</h2>

<p>Pada kesempatan kali ini saya iseng luar biasa ingin membuat termometer yang
tersambung ke cloud. Istilah kerennya, &ldquo;Internet of Things.&rdquo; Ide ini muncul
karena akhir-akhir ini suhu udara tidak menentu. Terkadang saya gerah sekali
ketika malam hari. Saya memiliki termometer &ldquo;offline&rdquo; yang selalu memberi tahu
saya saat ini suhu udaranya berapa. Saya memiliki hipotesis, saya akan sangat
gerah dan berkeringat luar biasa jika suhu udara di atas 32 derajat celcius dan
saya akan merasa sejuk jika suhu udara di bawah 28 derajat celcius.</p>

<p>Untuk memvalidasi hipotesis saya, tentu saja saya perlu memiliki catatan berapa
suhu saat ini pada setiap waktu. Sayang sekali, termometer offline seharga
Rp30.000an ini tidak memiliki catatan. Andai ada sebuah termometer yang
memiliki catatan dan disimpan ke berkas, itu akan sangat membantu. Akhirnya
tercetuslah ide membuat termometer sendiri.</p>

<h2>Peralatan</h2>

<p>Saya mengikuti tutorial dari <a href="https://learn.adafruit.com/adafruits-raspberry-pi-lesson-11-ds18b20-temperature-sensing/hardware">Adafruit</a>
mengenai cara membaca temperatur dengan Raspberry. Di tutorial tersebut,
mereka menggunakan sensor DS18B20. Saya segera mencari sensor tersebut di
<a href="https://www.bukalapak.com/products/s?search%5Bkeywords%5D=ds18b20">Bukalapak</a>.
di sana kita akan menemukan banyak produk, tetapi banyak pelapak yang tidak
aktif juga. Saya kemarin membeli di <a href="https://www.bukalapak.com/p/rumah-tangga/elektronik-1111/lain-lain-220/lmm0-jual-sensor-suhu-ds18b20">lapak yang ini</a>.
Dan iya, harga sensornya Rp30.000an &mdash; sudah sama mahalnya dengan termometer
offline yang saya beli.</p>

<p>Kemudian saya membeli breadboard di <a href="https://www.tokopedia.com/pcmelektrobik">toko elektronik dekat kantor</a>.
Harganya Rp27.000. Saya juga membeli satu paket resistor Sparksfun di
<a href="http://www.famosastudio.com/resistor-kit-025w-500-total">Famosa Studio</a>. Dengan
peralatan yang sudah siap di tangan, saya bisa mengikuti tutorial dari Adafruit.
Skematik yang diberikan cukup straightforward. Tada, ini dia hasilnya.</p>

<p>!!!!!!!!!!!!!!!!!! photos goes here</p>

<h2>Konfigurasi Raspberry</h2>

<p>Selanjutnya adalah menyiapkan Raspberry. Saat itu saya mencoba dengan Raspberry
generasi awal tipe B dengan memori 256 MB. Kemudian agar tidak lambat updatenya,
saya memasang Raspbian versi terbaru ke SD Card dengan Win32DiskImager. Begitu
saya tancap kabel power, Raspberry tidak tersambung ke jaringan. Bahkan dia
tidak hidup, hanya ada 1 LED merah yang menyarah (power) dabntidak ada
tanda-tanda kehidupan. Ups.</p>

<p>Penasaran, saya pindahkan SD Card ke Raspberry PI saya yang satu lagi yang
berukuran 512 MB. Hidup! Ada aktivitas disk! Ada aktivitas jaringan, tetapi
gagal saya ssh. Ups. Saya coba login manual dengan menancapkan kabel HDMI ke
monitor dan menancapkan kabel keyboard USB. Usut punya usut, ternyata SSH
daemon harus diaktifkan secara manual. Oh. Oke, perkara sederhana.</p>

<p>Meski demikian, saya masih penasaran mengapa versi terbaru tidak jalan di model
256 MB. Oleh karenanya saya coba memasang versi yang berbeda di SD Card dan
mencoba menancapkannya di masing-masing Raspberry yang saya miliki. Berikut
hasilnya:</p>

<table>
<thead>
<th>Model/Konfigurasi</th>
<th>2016-03-18-raspbian-jessie-lite</th>
<th>2017-01-11-raspbian-jessie-lite</th>
</thead>
<tbody>
<tr>
<td>Raspbery PI B (Gen. 1) 256 MB</td>
<td>Jalan</td>
<td>Tidak mau hidup, layar boot tidak muncul</td>
</tr>
<tr>
<td>Raspbery PI B (Gen. 1) 512 MB</td>
<td>Jalan</td>
<td>Jalan</td>
</tr>
</tbody>
</table>


<p>Hmmmm. Cukup. Aneh. Entah saya yang terburu-buru, atau memang ada galat di
versi terbaru. Saya tidak yakin yang terakhir. Tapi saya sudah melakukan
rewrite berulang-ulang ke SD Card saya dan hasilnya sama saja. Oke, kita
settle-kan saja dengan yang 512 MB dulu.</p>

<p>Tutorial dari Adafruit cukup straightforward. Akan tetapi script Python nya
terlalu panjang untuk saya. Saya akhirnya membuat Bash Script sederhana seperti
ini:</p>

<pre><code>$ cat worker.sh
#!/bin/bash

TARGET=$(find /sys/devices/w1_bus_master1/28* | grep w1_slave)
TEMP=$(cat $TARGET | grep -o 't=.*')
echo "Temperature reading is: $TEMP"
</code></pre>

<p>Mari kita lihat hasilnya</p>

<pre><code>$ bash worker.sh
Temperature reading is: t=29250
</code></pre>

<p>Woow berjalan dengan sempurna! Baiklah, seharusnya, saya tinggal membuat Cronjob
kemudian menyimpan hasilnya ke berkas file. Jadilah sebuah pencatat temperatur.
Kendati demikian, saya ingin membuat hal yang lebih menarik yaitu menyambungkan
perangkat ini ke Cloud. Oleh karena saya malas membuat basis data yang kompleks,
saya memilih untuk menggunakan Git saja.</p>

<p>Sementara, hasil bacaan dari temperatur dapat dilihat pada akun Github saya:</p>

<p><a class="embedly-card" href="http://github.com/mufid/thermofidz">mufid/thermofidz</a></p>

<script async src="http://mufid.github.io//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>


<p>Btw, ini hasil rangkaiannya. Tidak jauh berbeda dengan yang ditunjukkan oleh
Adafruit:</p>

<p><img src="http://mufid.github.io/images/post/raspi-temp-electronics.jpg" alt="Hasil Utak Atik" /></p>

<p>Yak, begitulah.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Benchmarking ActiveRecord Load: #find_in_batches (or #find_each) and #each For Processing Bulk Records]]></title>
    <link href="http://mufid.github.io/blog/2016/rails-batch-performance/"/>
    <updated>2016-12-15T15:00:00+00:00</updated>
    <id>http://mufid.github.io/blog/2016/rails-batch-performance</id>
    <content type="html"><![CDATA[<p>Currently i am building a small enough Rails application, but somehow on some
endpoints, we process and iterate 10k records on a single request. Sure i am
caching all of those requests, but 870ms response time for first request is
still unacceptable for me.</p>

<p>Some says it is problem with the JSON rendering. Then i installed oj gem, but
the request didn&rsquo;t get a noticable faster rendering. And then i deleted all
JSON rendering, the request still on 800-ish ms response time. All of these
findings suggest me that the problem is in the model / query itself.</p>

<p>When processing much records, it would be very easy to get out of memory
problem if it is being done incorrectly. By default, when using <code>#each</code> method,
Rails will load <em>all records</em> with specified filters (<code>where</code>, scope, etc)
<em>into memory</em>. Thus, Rails&#8217; recommendation is to use <code>find_each</code> command,
which internally using <code>find_in_batches</code> method. <code>find_in_batches</code> will not
try to load all matched records in memory. Instead, it will load records by
batch.</p>

<p>The thing is, i was using <code>find_each</code>, but somehow, i was stuck on 2 seconds
request. I think the problem was the <code>find_in_batches</code> so i changed the
implementation to use <code>find_in_batches</code>. However, this way didn&rsquo;t help me.
I still got 800-ish ms response time.</p>

<p>Somehow, i was curious, was the problem is inside the find_in_batches? Or
is it in the Ruby yield and loop? I am not sure since computer nowadays have
gigahertz of computing power. However, i did the benchmark and the benchmark
looks like this:</p>

<pre><code>class Metadata &lt; ApplicationRecord
  def build_summary
    points = Metadata.where('retrieved_at &gt; \'2000-01-01 00:00:00\'')

    logger.info 'Benchmark: #find_in_batches'
    logger.info begin
      Benchmark.measure do
        points.find_in_batches do |dp|
          logger.info "End finding batches. Found: #{dp.count}"
        end
      end
    end

    logger.info 'Benchmark: #all'
    logger.info begin
      Benchmark.measure do
        points.each do |dp|
          # yield nothing
        end
      end
    end

    logger.info 'Benchmark: 10k loop'
    logger.info begin
      Benchmark.measure do
        (1..10_000).each do |i|
          # yield no one
        end
      end
    end
  end
end
</code></pre>

<p>I added &lsquo;normal&rsquo; loop, just curious if the problem is inside the
Ruby&rsquo;s interpreter.</p>

<p>Here is the result. I did this on Dual Core 4 GB RAM Virtualbox inside Intel
Core i5 with 16 GB RAM. I used Ruby 2.3.1 and Rails 5.0.0.1. For database, i
use PostgreSQL 9.6.</p>

<pre><code>I, [2016-12-15T14:56:37.463516 #28376]  INFO -- : Benchmark: #find_in_batches
I, [2016-12-15T14:56:37.511837 #28376]  INFO -- : End finding batches. Found: 1000
D, [2016-12-15T14:56:37.516353 #28376] DEBUG -- :   Metadata Load (3.2ms)
I, [2016-12-15T14:56:37.550252 #28376]  INFO -- : End finding batches. Found: 1000
D, [2016-12-15T14:56:37.553774 #28376] DEBUG -- :   Metadata Load (2.8ms)
I, [2016-12-15T14:56:37.596984 #28376]  INFO -- : End finding batches. Found: 1000
D, [2016-12-15T14:56:37.603011 #28376] DEBUG -- :   Metadata Load (5.4ms)
I, [2016-12-15T14:56:37.645731 #28376]  INFO -- : End finding batches. Found: 1000
D, [2016-12-15T14:56:37.652892 #28376] DEBUG -- :   Metadata Load (6.5ms)
I, [2016-12-15T14:56:37.692978 #28376]  INFO -- : End finding batches. Found: 1000
D, [2016-12-15T14:56:37.696923 #28376] DEBUG -- :   Metadata Load (3.1ms)
I, [2016-12-15T14:56:37.738265 #28376]  INFO -- : End finding batches. Found: 1000
D, [2016-12-15T14:56:37.742807 #28376] DEBUG -- :   Metadata Load (3.5ms)
I, [2016-12-15T14:56:37.787560 #28376]  INFO -- : End finding batches. Found: 1000
D, [2016-12-15T14:56:37.792086 #28376] DEBUG -- :   Metadata Load (3.1ms)
I, [2016-12-15T14:56:37.828058 #28376]  INFO -- : End finding batches. Found: 1000
D, [2016-12-15T14:56:37.836220 #28376] DEBUG -- :   Metadata Load (7.2ms)
I, [2016-12-15T14:56:37.907940 #28376]  INFO -- : End finding batches. Found: 1000
D, [2016-12-15T14:56:37.911302 #28376] DEBUG -- :   Metadata Load (2.8ms)
I, [2016-12-15T14:56:37.943847 #28376]  INFO -- : End finding batches. Found: 1000
D, [2016-12-15T14:56:37.945335 #28376] DEBUG -- :   Metadata Load (0.9ms)
I, [2016-12-15T14:56:37.949258 #28376]  INFO -- : End finding batches. Found: 157
I, [2016-12-15T14:56:37.949421 #28376]  INFO -- :   0.330000   0.010000   0.340000 (  0.485759)
I, [2016-12-15T14:56:37.949613 #28376]  INFO -- : Benchmark: #all
D, [2016-12-15T14:56:37.991020 #28376] DEBUG -- :   Metadata Load (40.9ms)
I, [2016-12-15T14:56:38.218292 #28376]  INFO -- :   0.220000   0.000000   0.220000 (  0.268597)
I, [2016-12-15T14:56:38.218840 #28376]  INFO -- : Benchmark: 10k loop
I, [2016-12-15T14:56:38.219272 #28376]  INFO -- :   0.000000   0.000000   0.000000 (  0.000362)
</code></pre>

<p>Sure it is not the Ruby&rsquo;s interpreter problem since vanilla 10k loop only took
0.3 msec. Comparable to native speed, huh? But we found several interesting
findings:</p>

<ul>
<li>using #each is faster than using #find_in_batches (480 ms to 260 ms)</li>
<li>&hellip; What &ldquo;{Model} Load (some ms)&rdquo; means? It does not even reflect the real
load time. &ldquo;Metadata Load 40.9 ms&rdquo;, meanwhile the real load time is 268 ms.
If we compare from logger timestamp, it is also around 268 ms (38.218 &ndash; 37.949).
Seems like internally they use different measurement tip.</li>
<li>For each group in find_in_batches, the &ldquo;Metadata Load&rdquo; itself does not reflect
the real time to yield the method. If we compare each DEBUG line, it will be
around 40ms (e.g.: Look 37.550252 &ndash; 37.516353), pretty far from 3.2ms.</li>
</ul>


<p>So what is my solution for processing 10k records? I don&rsquo;t know. The page itself
will rarely change, so caching the request will help it much. But i am still
curious, why processing only 10k records can took up to 800ms.</p>

<p>Also, i am still curious why &ldquo;Model Load&rdquo; says faster than the time it is
actually need. It took 40ms between yield but it says loaded in 3.2ms.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FR: Sebuah Prediksi Cuaca yang Tidak Berlaku untuk Pulau Harapan]]></title>
    <link href="http://mufid.github.io/blog/2016/fr-harapan/"/>
    <updated>2016-12-08T14:00:00+00:00</updated>
    <id>http://mufid.github.io/blog/2016/fr-harapan</id>
    <content type="html"><![CDATA[<p>Jadi, <a href="http://peentar.id">kantor saya yang sekarang</a> mengadakan acara jalan-jalan ke Pulau Harapan.
Kali ini agak berbeda dengan <a href="https://mufid.github.io/blog/2013/fr-jogja/">FR saya sebelumnya</a>, saya
<em>tidak</em> akan menulis tentang harga sama sekali karena semua akomodasi dibayarkan oleh kantor.</p>

<blockquote><p>Catatan: FR ini akan diperbarui lagi ketika foto sudah diunggah <s>dan jika saya tidak malas</s>.</p></blockquote>

<!-- more -->


<h3>Piknik Peentar</h3>

<p>H1 di atas buat SEO aja. Abaikan. Karena kita cinta organik &lt;3 LOL</p>

<h3><em>Preflight</em> dan Hari ke-1</h3>

<p>Sebelum berangkat, rekan saya menakut-nakuti dengan <a href="http://megapolitan.kompas.com/read/2016/12/03/06555671/jabodetabek.dan.provinsi.lainnya.diprediksi.hujan.disertai.angin.kencang">berita ini</a>:</p>

<blockquote><p>Badan Meteorologi, Klimatologi dan Geofisika (BMKG) memprakirakan potensi hujan deras
disertai petir dan angin kencang di sejumlah provinsi di Indonesia mulai Sabtu (3/12/2016)
hingga Kamis (8/12/2016).</p></blockquote>

<p>Astaga. Kalau begini caranya, saya membayangkan</p>

<ul>
<li>ombak yang besar,</li>
<li>angin yang tidak bersahabat, serta</li>
<li>hujan yang tiada henti.</li>
</ul>


<p>sehingga saya pastikan saya membawa Drybag serta membuat proteksi ganda dengan raincover
untuk daypack saya. Andai terjadi hujan yang luar biasa, saya tidak perlu takut pakaian saya basah.</p>

<p>Kami berangkat pada tanggal 6 Desember dengan taksi ke muara angke (yup, dibayarkan oleh kantor,
tentu saja). Meski demikian, awalnya kami berpikir untuk Uber atau Grab saja, akan tetapi kami
gagal menemukan driver pada laman <em>matchmaking</em> aplikasi. Pernah <em>sih</em> pencarian driver berhasil,
tetapi kemudian dibatalkan oleh driver yang bersangkutan. Huft.</p>

<p>Kami berangkat sekitar pukul 03.30 dini hari dan sampai pukul 04.30. Kami shalat subuh kemudian
bersantai sejenak hingga pukul 06.00. Salah satu cerita kami saat bersantai kemarin adalah supirnya
yang <a href="https://www.youtube.com/watch?v=6CO7Zsqx4h0">&ldquo;Light on Fire&rdquo;</a>. <em>Ngebut banget!</em> katanya.
Akan tetapi, menurut saya, itu masih &ldquo;normal&rdquo;. Dulu saya naik bis malam lebih sadis lagi.</p>

<p>Kami nge-tag tempat pukul 06.00 dan kapal baru benar-benar berangkat sekitar pukul 07.30. Tidak
seperti biasanya; karena ada yang mengatakan cuaca akan sedikit kacau, saya tidak membawa buku
&mdash;&ndash; khawatir membawa buku malah akan merusak buku kesayangan saya. Saya mendengarkan radio FM
saja dan mendengarkan musik, sembari menulis cerita pendek dan puisi singkat.</p>

<blockquote><p>Tips di kapal:</p>

<ul>
<li>Kapalnya cukup besar, <em>double decker</em>, agak berbeda dengan kapal yang saya
naiki enam tahun yang lalu untuk ke Pulau Tidung. <em>Deck</em> pertama adalah
<em>deck</em> dengan kursi. <em>Deck</em> kedua adalah <em>deck</em> tanpa kursi. Jika Anda suka
<em>selonjoran</em>, <em>deck</em> kedua cocok untuk Anda.</li>
<li>Apapun <em>deck</em> yang Anda pilih, pertimbangkan untuk menjauhi mesin. Mesin
sangat berisik.</li>
<li><em>Deck</em> pertama lumayan dingin karena tidak terkena sinar matahari langsung</li>
<li><em>Deck</em> teratas juga sebenarnya dingin karena banyak angin, tetapi Anda juga
sekaligus akan terkena sinar matahari yang langsung. Mungkin Anda akan
mempertimbangkan untuk menggunakan <em>sunblock</em>.</li>
<li>Pertimbangkan untuk membawa jaket <em>wind blocker</em> untuk melawan angin yang
sangat kuat.</li>
</ul>
</blockquote>

<p>Kami sampai persis pukul 10.30. Kami segera melakukan <em>unpack</em> dan bersiap untuk shalat, makan
siang, dan melaksanakan CSR dari Peentar. CSR selesai pukul 13.30 dan kami
mendapatkan informasi yang cukup banyak dari penduduk setempat. Sayang sekali
saat blog ini ditulis, informasi yang cukup banyak tersebut ada di rekan Saya.
Saya akan perbarui kembali blog ini dengan informasi yang kami dapat jika
<s>saya tidak malas</s> saya sudah bertemu lagi dengan rekan saya.</p>

<p>Setelah selesai, pukul 14.00 kami berangkat ke Pulau <s>Bakwan</s> Perak. Perjalanan
ke pulau perak memakan waktu kurang lebih satu jam. Kami sampai sekitar
mendekati pukul 15.00; saya lupa persisnya jam berapa. Di pulau perak saya
shalat dulu untuk kemudian menuliskan laporan CSR di sana. Kami pergi lagi dari
pulau perak pukul&hellip;.. hmmm&hellip; Saya lupa. Yang pasti kami sampai lagi di pulau
harapan pukul&hellip; hmmmmm&hellip; saya juga lupa : /. Yang pasti kami jam 19.00 sudah
siap untuk santap malam.</p>

<blockquote><p>Tips khusus untuk muslim yang berniat berjalan-jalan ke pantai:</p>

<ul>
<li>Salah satu syarat untuk shalat adalah <a href="http://rozikinmuafa.lecture.ub.ac.id/2014/07/shalat-dengan-pakaian-kotor/">suci dari najis</a> dan kotor belum
tentu najis. Jadi, pertimbangkan membawa semacam tikar yang dibungkus
drybag saat pergi ke pulau yang tidak ada musholanya.</li>
<li>Anda boleh <a href="http://muslim.or.id/1853-air-yang-digunakan-untuk-berwudhu.html">berwudhu dengan air laut</a>.</li>
</ul>
</blockquote>

<p>Hari diakhiri dengan presentasi hasil CSR kami dan acara BBQ ikan dan jagung.
Saya tidur pukul 10.00 karena mengantuk sekali.</p>

<h3>Hari ke-2</h3>

<p>Saya bangun berkali-kali di malam hari, tetapi tidur saya dengan mimpi &mdash;
menandakan saya dapat REM dan berarti tidur saya nyenyak. Saya benar-benar
bangun pukul&hellip;.. hmmm&hellip; lupa lagi : / Yang pasti saat bangun saya mencoba
untuk melihat langit dulu, dan ternyata langitnya berawan karena tadinya saya
meniatkan untuk <em>stargazing</em>.</p>

<p>Kami santap pagi pada pukul 06.30. Setelah itu saya mengosongkan drybag saya
untuk mengamankan barang-barang yang akan di bawa di tengah snorkeling seperti
ponsel dan dompet. Saya memang bisa berenang &mdash; meski tidak terlalu mahir. Akan
tetapi, entah mengapa, saya selalu takut melihat laut yang sesungguhnya. Sekitar
pukul 10.00, kapal berhenti untuk snorkeling sesi pertama. Saya mencoba turun
perlahan dari kapal dengan menggunakan tangga. Ketakutan saya menghilang ketika
benar-benar bisa mengambang di air menggunakan pelampung. Saya menikmati
terumbu karang yang indah di sana. Saya tidak ingat persis sampai berapa lama
snorkeling ini berlangsung. Yang pasti kami sekitar pukul 12 sudah tiba di pulau
<s>bakwan</s> perak lagi. Kali ini, saya bersama beberapa rekan saya, Wisnu dan
Ulil, mencoba mengitari pulau perak. Di dalamnya, ada hutan. Ketika hutan itu
kita lalui, kita melihat pantai yang sepertinya tidak tersentuh. Sangat bersih.
Meski demikian, kami yakin kami bukanlah yang pertama yang menemukan pantai
tersebut karena kami melihat ada dua jejak kaki di sana.</p>

<p>Yang saya ingat ketika mengitari pulau? Tentu saja, Crysis!</p>

<p>Snorkeling kedua dimulai sekitar pukul 13.30. Saya tidak ingat persis, tetapi
pada snorkeling kali ini saya mencoba untuk melepas pelampung dan mencoba
ke dasar laut. Berhasil! Saya benar-benar bersyukur kala itu karena berhasil
membunuh rasa takut saya.</p>

<p>Kami sampai kembali di Pulau Harapan sekitar pukul 17.45. Kami mandi, santap
malam, kemudian <s>memantau</s> menikmati <em>performance</em> <s>nginx dengan Grafana
</s>. Saya kembali ke kamar duluan pada pukul 21.30 karena mengantuk.</p>

<h3>Hari ke-3</h3>

<p>Seperti hari sebelumnya, kami santap pagi pukul 06.30. Akan tetapi, kali ini,
kami coba berjalan untuk menyusuri dan melihat-lihat pulau kelapa. Kami
berangkat pukul 05.30 bersama rekan saya, Hanif, Aji, dan Adhelia.
Di sana kami melewati &ldquo;jembatan&rdquo;. Jangna bayangkan jembatan di sini sama dengan
jembatan yang ada di pulau Tidung. Jembatan ini cukup modern karena terbuat dari
<em>concrete</em>. Kemudian, terlihat jembatan tertanam di dasar yang tidak terlalu
dalam (berbeda sekali dengan jembatan di pulau Tidung). Kami hanya sampai
pinggir pulau kelapa karena beberapa dari rekan saya belum melakukan <em>packing</em>.
Kami pulang dan santap pagi. Kami tiba di <em>port</em> sekitar pukul 08.00, berangkat,
dan sampai kembali di Muara Karang pukul 11.30. Melihat Google Maps Traffic,
ada beberapa bagian yang merah. Saya bersama beberapa rekan memutuskan untuk
menggunakan kereta saja &mdash; meski jika menggunakan Uber akan dibayarkan oleh
kantor juga.</p>

<blockquote><p>Tips: Di siang hari, di <em>port</em> ada <em>feeder busway</em>. Sebagaimana <em>feeder</em> pada
umumnya, Anda cukup membayar Rp3.500 saja, dan Anda bisa pergi ke koridor
manapun (dengan transit, tentunya) tanpa membayar tambahan uang sama sekali.</p></blockquote>

<h3>Pasca Liburan</h3>

<p>Seperti biasa, saya kembali bermain <a href="http://plays.tv/video/58493361b86d754b29/you-are-rushing-too-much-">kapal-kapalan</a>.
Skill saya <s>yang memang tumpul</s> tampaknya perlu diasah lagi.</p>

<p>Di luar itu, saya masih terasa pusing karena bergoyang-goyang di laut. Saya ingat, beberapa kali
saya melewati laut, memang rasa goyang-goyangnya membekas hingga beberapa jam. Akan tetapi, tidak
perlu khawatir berlebihan.  Terkadang, memang ada masalah yang hanya waktu yang
bisa menjawab. Tidak perlu melakukan apapun, cukup istirahat dan bermain kapal-kapalan saja,
mudah-mudahan rasa goyang-goyang ini segera hilang.</p>

<h3>Eh, ada satu lagi!</h3>

<p>Peentar lagi hiring sekarang. Kita menggunakan Rails di frontend dan Java di backend. Langsung
saja lihat Joel Test nya Peentar di <a href="http://peentar.id/career?ref=wazaundtechnik">Peentar Career</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lembar Kerja dalam Tiga Puluh Baris Javascript]]></title>
    <link href="http://mufid.github.io/blog/2016/spreadsheet-js/"/>
    <updated>2016-10-25T08:00:00+00:00</updated>
    <id>http://mufid.github.io/blog/2016/spreadsheet-js</id>
    <content type="html"><![CDATA[<p><img src="http://mufid.github.io/images/post/spreadsheet-js.gif" alt="Spreadsheet" /></p>

<p>Saya menjelajahi kembali beberapa tautan yang ada di penanda saya. Saya menemukan
tautan yang sangat menarik beberapa tahun lampau: membuat lembar kerja dalam 30
baris di Javascript. Woh!</p>

<p>Baiklah, untuk membuat cerita lebih pendek, saya melihat kembali dimana keajaiban
baris kode tersebut. Anda dapat melihat kode sumber aslinya di <a href="http://jsfiddle.net/ondras/hYfN3/">Codepen</a>
(via <a href="https://news.ycombinator.com/item?id=6725387">HN</a>). Pertanyaan saya ada
dua:</p>

<ul>
<li>Bagaimana menyelesaikan formula di sana?</li>
<li>Bagaimana <em>dependency resolution</em> antar sel di lembar kerja tersebut?</li>
</ul>


<p>Mari kita bahas yang pertama. Ini menjadi hal yang menarik bagi saya karena
penyelesaian formula berarti Anda membuat DSL sendiri, menerjemahkannya, dan
mengeksekusinya. DSL yang digunakan oleh semua program lembar kerja serupa.
DSL yang digunakan juga dekat dengan bahasa pemrograman pada umumnya. Ya,
menguraikan formula menjadi hal yang dimengerti dan dieksekusi oleh mesin
bukanlah hal yang sederhana.</p>

<p>Ternyata, program Javascript ini tidak memiliki DSL sendiri. Alih-alih,
program ini menggunakan perintah <code>eval</code> sederhana untuk menguraikan
dan mengeksekusi formulanya. Yup, tentu saja jika Anda memasukkan
perintah Javascript yang aneh-aneh &mdash;&ndash; bukan bentuk formula lembar
kerja pada umumnya &mdash;&ndash; Anda akan menemukan sedikit kejanggalan. Anda
dapat memberikan perintah <code>alert</code> pada perintahnya dan <code>alert</code> akan
bena-benar muncul. Tentu saja bukan suatu hal yang akan Anda lakukan
pada mesin produksi, tetapi ini sudah sangat baik sebagai sebuah PoC.</p>

<p>Mari kita bahas yang kedua: bagaimana <em>dependency resolution</em> dilakukan?
Anggap saya memiliki sel A1 berisi <code>=B2 * 5</code> dan B2 yang berisi <code>=100*C2</code>
dan C2 yang berisi <code>99</code>? Bagaimana penyelesaian keterkaitan formula
yang berbeda sel? Ah, &ldquo;keajaiban&rdquo; bahasa yang interpret di sini.</p>

<p>Anda dapat melihat di kode tersebut: ada perintah yang membuat property.
Lihat pada bagian ini:</p>

<pre><code>var getter = function() {
    var value = localStorage[elm.id] || "";
    if (value.charAt(0) == "=") {
        with (DATA) return eval(value.substring(1));
    } else { return isNaN(parseFloat(value)) ? value : parseFloat(value); }
};
Object.defineProperty(DATA, elm.id, {get:getter});
Object.defineProperty(DATA, elm.id.toLowerCase(), {get:getter});
</code></pre>

<p>Ini adalah dokumentasi dari <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">MDN</a>:</p>

<blockquote><p>Object.defineProperty(obj, prop, descriptor)</p>

<p>Parameters</p>

<ul>
<li>obj<br/>
The object on which to define the property.</li>
<li>prop<br/>
The name of the property to be defined or modified.</li>
<li>descriptor<br/>
The descriptor for the property being defined or modified.</li>
</ul>
</blockquote>

<p>Jadi, pada dasarnya, <code>eval</code> akan dilakukan dengan property di dalam
object bernama <code>DATA</code>. Property-nya sendiri bersifat dinamis, di dalam
fungsi. Properti baru benar-benar didapatkan nilainya apa ketika dieksekusi.
Jadi, sebenarnya yang melakukan dependency resolution adalah <code>eval</code> itu sendiri.
Program ini tidak benar-benar membuat <em>dependency graph</em> seperti yang
saya bayangkan sebelumnya.</p>

<p>Sebagai contoh, ada formula <code>=A9*Math.cos(B2)</code>. Yang terjadi adalah Javascript
<code>eval</code> akan mengevaluasi <code>A9 * Math.cos(B2)</code> ke dalam sel tersebut. <code>Math.cos</code>
adalah fungsi bawaan Javascript sehingga tidak perlu dipertanyakan. Bagaimana
dengan A9 dan B2? Dua variabel tersebut adalah property dalam objek <code>DATA</code>
yang dapat diakses tanpa mengetikkan <code>DATA</code> berkat idiom <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with">with</a>. Apa nilai A9 dan B2? Belum tahu. Akan tetapi,
karena A9 dan B2 itu sendiri merupakan property yang memiliki getter sendiri,
maka kemudian <code>eval</code> akan mengeksekusi <code>DATA.A9</code>  dan <code>DATA.B2</code> &mdash; yang mana
di dalam property tersebut akan melakukan <code>eval</code> lagi jika diawali dengan <code>=</code>.</p>

<p>Bagaimana jika ada <em>circular reference</em>? Ini diakali dengan <em>try-catch</em>
sederhana berikut:</p>

<pre><code>INPUTS.forEach(function(elm) { try { elm.value = DATA[elm.id]; } catch(e) {} });
</code></pre>

<p>Jika terdapat <code>circular reference</code>, call-stack akan menjadi sangat panjang.
Bayangkan B2 menggunakan nilai dari A1 dan A1 menggunakan nilai dari B2.
Akan terjadi sebuah pemanggilan fungsi <code>getter</code> terhadap dua sel berbeda
yang tidak ada habisnya. Ketika call stack sangat panjang, interpreter akan
menghasilkan exception, yang ditangkap, dan diabaikan.</p>

<p>Saya rubah kode asli agar menangkap exception dan mencetaknya. Beriktu hasilnya:</p>

<p><img src="http://mufid.github.io/images/post/spredsheet-js-too-much-recursion.png" alt="Recursion" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resolusi Monitor dan DPI]]></title>
    <link href="http://mufid.github.io/blog/2016/dpi-resolution/"/>
    <updated>2016-10-05T08:00:00+00:00</updated>
    <id>http://mufid.github.io/blog/2016/dpi-resolution</id>
    <content type="html"><![CDATA[<p>Saya sudah berencana sejak lama sekali untuk mengganti monitor saya dari 17&#8221; dengan resolusi 1440x900
yang menurut saya cukup kekecilan untuk mata saya. Jika resolusi 17&#8221; tersebut kekecilan, berapa yang
&ldquo;tidak kekecilan&rdquo; bagi saya? Untuk itu, saya perlu mendefinisikan apa itu &ldquo;kekecilan.&rdquo;</p>

<p>&ldquo;Terlalu kecil&rdquo; terkait dengan ukuran teks-teks yang ada di layar. Itu definisi &ldquo;terlalu kecil&rdquo; yang
cukup jelas. Baiklah, question time! Pastinya akan muncul pertanyaan, &ldquo;kalau teksnya kekecilan, ya
yang digedein teksnya! Bukan monitornya!&rdquo; Tepat sekali. Itulah yang dilakukan para pengguna Mac
Retina Display. Di MBPr, ada setting bernama &ldquo;scaled resolution&rdquo; yang melakukan emulasi resolusi
layar ke resolusi &ldquo;yang diinginkan&rdquo;. Sekali lagi, ini emulasi. Yang di-render sebenarnya tetap
resolusi native. Oleh karena itulah, kalau mengembangkan aplikasi untuk Mac, kita perlu menyertakan
raster untuk DPI yang berbeda &mdash; agar hasil rendernya optimal.</p>

<p>Sayang sekali, emulasi resolusi (&ldquo;scaled resolution&rdquo;) hanya ada di Mac. Android memang memiliki
fitur membesarkan ukuran teks, tetapi hanya teks. Untuk memperburuk suasana, tidak semua aplikasi
<em>respect</em> dengan setelan ukuran teks ini. Alasannya karena layout nya nanti rusak, katanya.</p>

<p>Windows juga memiliki fitur &ldquo;membesarkan ukuran&rdquo;. Sayang sekali, pengaturan ini tidak berjalan
dengan semestinya. Beberapa program malah rusak dan tidak <em>respect</em> dengan setelan ini.</p>

<p>Oleh karena itu, daripada bergantung dengan software dan saya belum bisa mengafford Mac, jadi
lebih baik saya mencari monitor yang menghasilkan teks yang lebih besar. Dan tentu saja, space
yang lebih lega &mdash; akan tetapi ukuran teks yang lebih besar menjadi penting.</p>

<p>Ukuran teks bisa dinilai dari ppi. Makin tinggi angka ppi, maka makin kecil piksel yang dihasilkan,
maka makin kecil ukuran teksnya. Oleh karena itu, saya perlu mengukur berapa &ldquo;ppi&rdquo; yang pas
untuk saya. Setelah melihat banyak sekali monitor, saya layar 19&#8221; dengan resolusi 1440x900 sangat
cocok untuk mata saya. Ukurannya enggak bikin sakit untuk dilihat dalam waktu lama. Akan tetapi,
ruang 1440x900 terlalu kecil untuk saya, maka saya perlu mencari ruang yang lebih besar.</p>

<p>Jadi, saya akan mencari monitor dengan ppi yang lebih rendah / mendekati ppi monitor 1440x900 di
19&#8221; dengan resolusi yang lebih tinggi. Awalnya, saya sangat kesemsem dengan layar 2K di
ukuran 27&#8221;. Akan tetapi, setelah mengetahui harga monitor 4K tidak jauh berbeda, saya jadi
kesemsem juga.</p>

<p>Sayang sekali, ketika melihat ppi nya, saya kecewa. Berikut rangkuman kalkulasi PPI nya:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>1440x900
</span><span class='line'>  - 17: 99 &lt;--- Terlalu kecil
</span><span class='line'>  - 19: 89 &lt;--- Ideal
</span><span class='line'>
</span><span class='line'>1920x1080
</span><span class='line'>  - 22: 100
</span><span class='line'>  - 23: 95 &lt;-- Terlihat acceptable
</span><span class='line'>  - 24: 91 &lt;-- Sepertinya cukup
</span><span class='line'>  - 25: 88 &lt;-- Ideal
</span><span class='line'>  - 27: 81 &lt;-- Terlalu besar? Kecuali meja saya juga panjang
</span><span class='line'>
</span><span class='line'>2560x1440
</span><span class='line'>  - 25: 117
</span><span class='line'>  - 27: 108
</span><span class='line'>  - 32: 92
</span><span class='line'>
</span><span class='line'>4K
</span><span class='line'>  - 34: 86
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Untuk kondisi sekarang, ukurang yang ideal adalah 24-25 dengan resolusi FHD. Lebih tinggi dari itu,
memang space nya cukup lapang (resolusinya lebih tinggi), namun sayangkan ppi terlalu kecil untuk
saya.</p>

<p>Ya begitulah.</p>

<p>Tentu saja, ppi yang nyaman untuk setiap orang berbeda-beda :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cara Googling]]></title>
    <link href="http://mufid.github.io/blog/2016/how-to-google/"/>
    <updated>2016-07-16T22:25:00+00:00</updated>
    <id>http://mufid.github.io/blog/2016/how-to-google</id>
    <content type="html"><![CDATA[<p>Beberapa orang mengeluhkan kepada saya karena gagal menemukan masalah
pemrograman apa yang ingin dicari di Google. Berikut adalah panduan singkat
berdasarkan keluhan-keluhan yang coba saya pahami.</p>

<!-- more -->


<h2>Mengetahui Etika dan Cara Bertanya yang Baik</h2>

<p>Pastikan Anda telah mengetahui etika bertanya. Jika Anda belum membacanya,
bacalah. Baca versi terjemahan dari &ldquo;How to Ask Question The Smart Way&rdquo;
oleh Harry Sufehmi di sini: <a href="http://harry.sufehmi.com/archives/2012-11-07-2556/">http://harry.sufehmi.com/archives/2012-11-07-2556/</a></p>

<h2>Menanyakan Hal yang Tepat</h2>

<p>Selanjutnya, Google bukanlah mesin ajaib yang bisa membaca pikiran kita.
Google hanya dapat menampilkan informasi dari apa yang telah diindeks olehnya.
Oleh karena itu, pikirkan kira-kira kata kunci apa yang perlu dimasukkan di
Google dan ada di dalam indeks Google.</p>

<p>Kita ambil contoh untuk galat. &ldquo;repair&rdquo; adalah kata valid untuk memperbaiki.
&ldquo;Fix&rdquo; pun kata yang valid untuk memperbaiki. Dua-duanya bisa dipakai. Akan
tetapi, ketika digabungkan dengan &ldquo;bug&rdquo;, maka ternyata Google memiliki
informasi &ldquo;fix bug&rdquo; lebih banyak daripada &ldquo;repair bug&rdquo;. Oleh karena itu,
sebaiknya Anda menggunakan kata-kata &ldquo;fix&rdquo; dibanding &ldquo;repair&rdquo;.</p>

<p><img src="http://mufid.github.io/images/post/trends-bug-repair.png" alt="Fix, Jangan Repair" /></p>

<p>Beberapa orang tidak merekomendasikan pencarian yang mengandung kata kurang
bermakna seperti &ldquo;How to X&rdquo; dan &ldquo;What is Y&rdquo;. Ini ada benarnya karena kata-kata
yang tidak bermakna justru akan mengotori hasil pencarian. Contohnya Anda
sedang ingin mencari nama komputer yang dibuat oleh Apple, maka dimanakah
kira-kira Anda dapat melihat nama komputernya? Tentu di websitenya Apple. Meski
demikian, memasukkan &ldquo;apple computer apple website&rdquo; menghasilkan</p>

<h2>Mengetahui Konteks</h2>

<p>Anda perlu mengetahui konteks terhadap apa yang ingin Anda cari. Sebagai contoh,
Anda ingin mengetahui konsep &ldquo;bridge&rdquo; di dunia pemrograman. Anda perlu secara
sadar memahami bahwa Anda sedang mencari konsep bridge, bukan jembatan fisik,
atau apapun itu.</p>

<p>Memasukkan &ldquo;bridge programming&rdquo; mungkin akan menemukan hal yang tidak
bermakna. Ada banyak hal yang berkaitan dengan bridge. Jangan-jangan, kita
malah menemukan bagaimana caranya membuat permainan kartu. Ya, penting
bagi kita untuk mengetahui konteks bahwa ada permainan kartu bernama bridge.</p>

<p>Maka dari itu, kita perlu memahami konteksnya. &ldquo;Bridge seperti apa yang kita
cari?&rdquo; Kita perlu menilik bridge ini dekat ke apa. Apakah library? Bukan.
Ini adalah konsep pemrograman. Maka kita perlu menilik lagi, &ldquo;Apa saja
konteks yang ada di konsep pemrograman?&rdquo;</p>

<p>Secara umum, kita bisa membuka buku pemrograman dasar seperti Big Java atau
buku-buku di seri Heads Up dan melihat &ldquo;bridge&rdquo; ini lebih dekat ke mana.</p>

<ul>
<li>&ldquo;Data Structure&rdquo;. Apakah bridge ini termasuk ke struktur data? Semacam
LinkedList? Sepertinya relevansinya kurang. Lanjut ke bab selanjutnya.</li>
<li>&ldquo;User Interface&rdquo;. Tentu saja bukan gambar jembatan yang kita maksud</li>
<li>&ldquo;Network&rdquo;. Baiklah, kita mulai menemukan masalah. Kalau Anda mencari &ldquo;bridge
network&rdquo; maka Anda akan menemukan banyak sekali hasil yang terkesan relevan.
Di sinilah penting untuk memahami konteks: Hasilnya terkesan relevan, tapi
apakah ini yang Anda cari? Ketika menelusuri lebih dalam, ternyata ada istilah
&ldquo;bridge&rdquo; juga di pemrograman jaringan, tetapi bukan konsep pemrograman itu
yang sedang kita cari.</li>
<li>&ldquo;Algorithm&rdquo;. Oke, ini kasusnya mirip dengan butir sebelumnya. Terkesan
menjadi solusi padahal bukan ini yang kita cari.</li>
<li>&ldquo;Design Pattern&rdquo;. Aha. Ketika kita mencari &ldquo;bridge design pattern&rdquo;, maka
kita akan menemukan hal yang tepat!</li>
</ul>


<p>Pemahaman konteks juga penting agar kita menggunakan terminologi yang tepat.
Di dunia terkait, banyak istilah yang sama tapi artinya berbeda.
Semisal, &ldquo;instance&rdquo; itu bisa berarti
kelas yang sudah di-construct (kelas yang telah di-instatiate), atau
juga bisa berarti mesin-mesin VM yang hidup (&ldquo;EC2 Instance&rdquo; misalnya).</p>

<h2>Lebih Umum, atau Lebih Spesifik</h2>

<p>Ketika mencari error, panduan umumnya adalah googling saja pesan errornya.
Atau, boleh jadi error itu intermitent (hanya kadang-kadang terjadi) sehingga
kita perlu mencari hal yang lebih umum dari error yang bersangkutan. Atau,
boleh jadi error tersebut sangat kontekstual sehingga kita perlu mencari
tingkatan yang lebih umum.</p>

<p>Misalnya, errornya terjadi karena NullPointerException. Ini sudah cukup jelas;
kesalahan terjadi karena Anda mencoba mengakses objek yang nilainya null. Akan
tetapi, Anda tidak sedang mem-pass parameter yang null. Oleh karena itu, coba
lihat lagi secara lebih umum. Meng-google &ldquo;NullPointerException java&rdquo; akan
menghasilkan hasil pencarian yang sampah. Hindari.</p>

<p>Akan tetapi, misalnya Anda ternyata menggunakan library Spring dengan modul
Autowired. Coba ini saja yang dicari, jadi &ldquo;NullPointerException spring
autowired&rdquo;.</p>

<h2>Forum!</h2>

<p>Ketika Anda telah melakukan itu semua, tetapi belum menemukan jawabannya,
selamat, masalah Anda ternyata tidak
ada di Google. Akan tetapi, Anda telah sangat mengerti permasalahan yang
Anda alami. Bertanyalah di forum atau StackOverflow. Atau, beberapa
komunitas juga memiliki Slack. Coba tanya di sana. Anda akan dibalas dengan
cepat. Percayalah, orang-orang di internet akan sangat menghargai Anda
jika Anda telah melakukan usaha memahami dulu apa yang hendak Anda tenyakan.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In Ruby, Everything is Evaluated]]></title>
    <link href="http://mufid.github.io/blog/2016/ruby-class-evaluation/"/>
    <updated>2016-07-10T22:25:00+00:00</updated>
    <id>http://mufid.github.io/blog/2016/ruby-class-evaluation</id>
    <content type="html"><![CDATA[<p>So if i write</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;world&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It will evaluate <code>def</code>, to which Ruby will &ldquo;create a method named hello in global scope, with puts &lsquo;world&rsquo; as a block&rdquo;. We can change &ldquo;global scope&rdquo; to any object we want.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Greeting</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;world&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The class &ldquo;Greeting&rdquo; is actually EVALUATED, NOT DEFINED (e.g. In Java, after we define a signature of a class/method, we can&rsquo;t change it, except using reflection). So actually, we can put anything in &ldquo;Greeting&rdquo; block, like</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Greeting</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Will define hello in greeting&quot;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;world&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Save above script as &ldquo;test.rb&rdquo; (or anything) and try to run it. It will show &ldquo;Will define hello in greeting&rdquo; EVEN you don&rsquo;t call &ldquo;Greeting&rdquo; class or &ldquo;hello&rdquo; class or you don&rsquo;t even need to instantiate &ldquo;Greeting&rdquo; class. This language feature allows meta programming, like what we see in Rails.</p>

<p>This time i will use Class Attribute within active support. If you ever run Rails, you should have it, but you can <code>gem install active_support</code> if you don&rsquo;t.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/core_ext/class/attribute&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Greeting</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Greeting</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">class_attribute</span> <span class="ss">:blocks</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">blocks</span><span class="o">[</span><span class="ss">:greeting</span><span class="o">].</span><span class="n">call</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">blocks</span><span class="o">[</span><span class="ss">:hello</span><span class="o">].</span><span class="n">call</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">protected</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">define_greeting</span><span class="p">(</span><span class="n">sym</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">blocks</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">blocks</span><span class="o">[</span><span class="n">sym</span><span class="o">]</span> <span class="o">=</span> <span class="n">blk</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Greeting</span><span class="o">::</span><span class="no">English</span> <span class="o">&lt;</span> <span class="ss">Greeting</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">define_greeting</span> <span class="ss">:greeting</span> <span class="k">do</span> <span class="o">|</span><span class="n">who</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Hi </span><span class="si">#{</span><span class="n">who</span><span class="si">}</span><span class="s2">, Ruby will greet you with hello world!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">define_greeting</span> <span class="ss">:hello</span> <span class="k">do</span> <span class="o">|</span><span class="n">who</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Hello World, </span><span class="si">#{</span><span class="n">who</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Greeting</span><span class="o">::</span><span class="no">Indonesian</span> <span class="o">&lt;</span> <span class="ss">Greeting</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">define_greeting</span> <span class="ss">:greeting</span> <span class="k">do</span> <span class="o">|</span><span class="n">who</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Halo kakak </span><span class="si">#{</span><span class="n">who</span><span class="si">}</span><span class="s2">, Ruby akan menyapamu dengan Halo Dunia!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">define_greeting</span> <span class="ss">:hello</span> <span class="k">do</span> <span class="o">|</span><span class="n">who</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Halo dunia! Salam, </span><span class="si">#{</span><span class="n">who</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="ss">Greeting</span><span class="p">:</span><span class="ss">:English</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">hello</span> <span class="s2">&quot;Fido&quot;</span>
</span><span class='line'><span class="c1"># Hi Fido, Ruby will greet you with hello world!</span>
</span><span class='line'><span class="c1"># Hello World, Fido!</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="ss">Greeting</span><span class="p">:</span><span class="ss">:Indonesian</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">hello</span> <span class="s2">&quot;Fido&quot;</span>
</span><span class='line'><span class="c1"># Halo kakak Fido, Ruby akan menyapamu dengan Halo Dunia!</span>
</span><span class='line'><span class="c1"># Halo dunia! Salam, Fido!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Previously i want to move the class attribute logic to above code, but after i see the <a href="https://github.com/rails/rails/blob/e35b98e6f5c54330245645f2ed40d56c74538902/activesupport/lib/active_support/core_ext/class/attribute.rb">Active Support code</a>, it is pretty complex, so i just require it : /</p>

<hr />

<p>Previously, i posted <a href="https://www.reddit.com/r/ProgrammerTIL/comments/4s2vmr/ruby_til_in_ruby_everything_is_evaluated/">this in Reddit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Class with Generics &lt;T&gt; Without the T in C#]]></title>
    <link href="http://mufid.github.io/blog/2016/generic-type-csharp/"/>
    <updated>2016-05-04T06:51:00+00:00</updated>
    <id>http://mufid.github.io/blog/2016/generic-type-csharp</id>
    <content type="html"><![CDATA[<p>So lately I have been developing a C# application with Xamarin. Then I faced a design problem where I should be able to call a function inside a class with generic type, but I don&rsquo;t know what is the generic type. Furthermore, I don&rsquo;t care what is the type of the generic.</p>

<p>Imagine a situation like this: I have a class like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Wrapper</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">IDestroyable</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">T</span> <span class="nf">RetrieveValue</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/* body */</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">void</span> <span class="nf">Destroy</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/* body */</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s go straight to the point: What if I want to call Destroy, but I don&rsquo;t care what is T? So I have</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">object</span> <span class="n">x</span> <span class="c1">// instance of Wrapper</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>object x</code> is an instance of <code>Wrapper</code>. But I can&rsquo;t cast it into wrapper without knowing the exact value of the generic type. I can&rsquo;t do something like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Object</span> <span class="n">x</span> <span class="p">=</span> <span class="n">something</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="n">X</span> <span class="k">as</span> <span class="n">Wrapper</span><span class="p">&lt;?&gt;).</span><span class="n">Destroy</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, generic is tightly coupled in C#. Meanwhile, in Java, generic is optional. If you don&rsquo;t specify the generic, Java just simply treat the generic type as <code>Object</code>. In java you can write the code like below, but not in C#:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">(</span><span class="n">X</span> <span class="k">as</span> <span class="n">Wrapper</span><span class="p">).</span><span class="n">Destroy</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>So how do I call <code>Destroy</code> without knowing the <code>T</code>? Surprisingly, the solution is pretty simple. Just extract the <code>Destroy</code> method to an interface:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">interface</span> <span class="n">IWrapperDestroyer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">void</span> <span class="nf">Destroy</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Wrapper</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IWrapperDestroyer</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">IDestroyable</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">T</span> <span class="nf">RetrieveValue</span><span class="p">()</span>
</span><span class='line'>  <span class="k">void</span> <span class="nf">Destroy</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So that I can simply call this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">(</span><span class="n">X</span> <span class="k">as</span> <span class="n">IWrapperDestroyer</span><span class="p">).</span><span class="n">Destroy</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Perhaps the next question is, why we get <code>x</code> as an <code>object</code> type at the first place? Why don&rsquo;t we just simply make it stronger type to <code>Wrapper</code> with known <code>T</code>? I don&rsquo;t know. Perhaps because I am working too much with reflection since I am creating Xamarin-based Android and iOS application with MvvmCross.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Having Fun with Java's Null]]></title>
    <link href="http://mufid.github.io/blog/2015/null/"/>
    <updated>2015-04-23T20:52:00+00:00</updated>
    <id>http://mufid.github.io/blog/2015/null</id>
    <content type="html"><![CDATA[<p>So lately i have been diving really deep (or not really) into Java. I found Java&rsquo;s null is interesting. I think, i hate <code>NullPointerException</code> very much. And most of the time, i hate my own way to deal with those things.</p>

<p>Btw, if you hate compiling Java&rsquo;s code just to test a one-line command, you may use <a href="https://github.com/albertlatacz/java-repl">JavaRepl</a>, which will give you an interactive mode of Java compiler.</p>

<h2>String Concatenation</h2>

<p>This is interesting. If you run</p>

<pre><code>String result = object + " is cool";
</code></pre>

<p>will invoke <code>toString</code> of the object <strong>only if the object is not null</strong>. If the object is null, <code>toString</code> will not be invoked and it will be replaced with <code>null</code> instead</p>

<pre><code>String result = new Object() + " is cool";
java.lang.Object@55c8a526 is cool

String result = new Object().toString() + " is cool";
java.lang.Object@55c8a526 is cool

String result = null + " is cool";
null is cool
</code></pre>

<p>But, you can&rsquo;t really invoke toString :))</p>

<pre><code>Object o = null;
String result = o.toString() + " is cool";
java.lang.NullPointerException
</code></pre>

<h2>Object Unboxing</h2>

<p>Well, since my code may be executed at another machine, serializing is very usual. And sometimes, i find it is also interesting how Java&rsquo;s boxing and unboxing work.</p>

<p>This routine will always work:</p>

<pre><code>long l = ...;
Long boxedLong = l;
</code></pre>

<p>But how about this?</p>

<pre><code>Long boxedLong = ...;
long l = boxedLong;
</code></pre>

<p>Yes, as you might expect, it may throw <code>NullPointerException</code>. Let&rsquo;s play with it:</p>

<pre><code>long l = (Long) null;
java.lang.NullPointerException
</code></pre>

<p>It is not fun. Really. For primitive-in-boxed object, we may want to use <code>itsTypeValue</code>. But in fact, you can&rsquo;t do that with Long. Meanwhile, you can do that with Boolean.</p>

<pre><code>long l = ((Long) null).longValue();
java.lang.NullPointerException

long l = new Long(null).longValue();
java.lang.NumberFormatException: null

new Boolean(null).booleanValue();
false
</code></pre>

<p>What really happened to those? I don&rsquo;t know.</p>

<h2>if not null and not null</h2>

<p>Sometimes, my flawless code merely run into this horrible lengthy operators:</p>

<pre><code>if (provider != null &amp;&amp; provider.getGlobalInfo() != null) {
    InfoBase globalInfo = provider.getGlobalInfo();
    doSomethingWith(globalInfo);
}
</code></pre>

<p>Well&hellip; what if i have something longer than that? Simply add null check before <code>doSomethingWith(that)</code>!</p>

<pre><code>if (provider != null &amp;&amp; provider.getProviderCoordinate() != null &amp;&amp; provider.getProviderCoordinate().getLatidudeBase() != null ) {
    Coordinate c = provider.getProviderCoordinate().getLatidudeBase();
    doSomethingWith(globalInfo);
}
</code></pre>

<p>Well.. still too long. <strong>You don&rsquo;t really need to get into that detail.</strong> Take care of your object&rsquo;s contract. Why don&rsquo;t we give a default value instead of null?</p>

<pre><code>class ProviderBase {
  InfoBase globalInfo;
  InfoBase getGlobalIInfo() {
    if (globalInfo == null) {
      return InfoFactory.getDefaultInfo();
    }
    return globalInfo;
  }
}
</code></pre>

<p>But still, <strong>if null is expected, then handle it with a better way.</strong> Just because i hate NPE, it is just better to give default value because most of the time null data is caused by serialization of not-yet-completed data model migration. You might have a better way other than default value (like, Annotation?), but you get the idea.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Instant Messaging (Including Whatsapp) Is Not For Mobile]]></title>
    <link href="http://mufid.github.io/blog/2015/no-im-at-least-for-now/"/>
    <updated>2015-04-03T20:56:00+00:00</updated>
    <id>http://mufid.github.io/blog/2015/no-im-at-least-for-now</id>
    <content type="html"><![CDATA[<p>Well, it&rsquo;s been a while since i broke <a href="http://www.gsmarena.com/lenovo_p780-5544.php">my smartphone</a>. Since communication is very important these days, i should get a new phone ASAP. Fortunately i only need calling and texting, so i can simply buy <a href="http://www.samsung.com/levant/consumer/mobile-phones/feature-phones/feature-phones/GT-E1205ZOTTUN">a dumbphone</a> to fullfill my need.</p>

<p>What? A dumbphone for today&rsquo;s communication? What on earth am  i actually doing? Because i only need SMS and GSM call. Even though my friends is actually on LINE, Whatsapp, Telegram, Skype, etc; <em>those are actually a decoy to a more horrible communication</em>. Let me tell you why i am doing this.</p>

<p>The first one, i am still able to contact my friend via phone call. So, no big deal.</p>

<p>The second one, i constantly use <a href="http://slack.com">Slack</a> for office-related communication. Release, hotfix, bug, &ldquo;random chit-chat&rdquo;. And since i use my office&rsquo;s notebook with real keyboard, typing feels very convenient. Copy-paste log into Slack and let my coworker see them. Screenshot? Simply drag and drop. Need to notify someone about your new deployment? Private message her/him. Still does not work? We can switch back communication to email anytime we want.</p>

<p>The last one and the most important thing, i don&rsquo;t need IM in my phone. Seriously. It is very handy to consume content on mobile, but not for producing it, including typing in it for 30 minutes or more. If we need to get something serious, we should do it within a big keyboard, where we can respond it fast and type it fast. But that&rsquo;s just one problem.</p>

<p>Another problem is its distraction. Enough is enough. Even though i use Slack on my computer, i don&rsquo;t need Slack on my mobile phone. When i had my smartphone, i didn&rsquo;t install it too. A simple notification &ldquo;Hey your build is broken,&rdquo; to my phone simply could break my mood when it comes in weekend. Also, if it is really important thing, people won&rsquo;t message me. They will call me. So, who need IM in mobile, anyway?</p>

<p>How about last-minute notification when i have a meetup? &ldquo;Hey Mufid, i am sorry, the venue was changed. Now we are in Coffee shop, no more in Cafe. See you soon!&rdquo; NO. If we plan it well, we will never have a last-minute information or last-minute-to-do-asap. Remember when we didn&rsquo;t have a phone and/or when we were still using <a href="http://en.wikipedia.org/wiki/Pager">a pager</a>? Remember how we planned everything very well so we minimize last-minute communication since at that time it was very hard to notify someone if we changed our plan in the last minute?</p>

<p>I will using my dumbphone, at least until i know why IM in Mobile is actually good for me.</p>

<p>Edit: sorry for my English. Feel free to give feedback. I will very happy if someone could help improve my English. I am not a native unfortunately : (</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kedewasaan Pengguna (Penggunaan) Internet Indonesia]]></title>
    <link href="http://mufid.github.io/blog/2015/flamebait/"/>
    <updated>2015-01-30T11:19:00+00:00</updated>
    <id>http://mufid.github.io/blog/2015/flamebait</id>
    <content type="html"><![CDATA[<p>Mari kita mulai dengan <a href="https://www.google.com/publicdata/explore?ds=d5bncppjof8f9_&amp;ctype=l&amp;strail=false&amp;bcs=d&amp;nselm=h&amp;met_y=it_net_user_p2&amp;scale_y=lin&amp;ind_y=false&amp;rdim=region&amp;idim=country:USA:CHN:GBR:IDN&amp;ifdim=region&amp;hl=en&amp;dl=en&amp;ind=false&amp;icfg">data:</a></p>

<p><img src="http://mufid.github.io/images/post/internet-growth.png" alt="Pertumbuhan Internet di Indonesia" /></p>

<p>Ada yang mengatakan Indonesia telat mengadopsi internet. Hal ini benar karena negara-negara barat seperti US dan UK yang sudah mulai mengadopsi secara masif sejak akhir 90an. Meski demikian, perkembangan internet di Indonesia sangatlah cepat. Menurut data dari Bank Dunia, ada 2,1% dari populasi Indonesia yang memiliki akses ke internet pada 2011. Dalam waktu 12 tahun, angka ini meningkat hingga hampir 8x-nya. Iya, delapan kalinya.</p>

<p>Seperti apa 8x peningkatan itu? Misalnya Anda tadinya naik kereta harganya Rp16.000, kemudian menjadi hanya Rp2.000 saja. Ini peningkatan penghematan yang luar biasa, bukan?</p>

<p>Akan tetapi, apa artinya peningkatan ini untuk Indonesia? <a href="http://priyadi.net/archives/category/internet/">Banyak</a>. Di antaranya, kita jadi <em>engeh</em> terhadap <a href="https://plus.google.com/+HarrySufehmi/posts/HrQDsKiVkaG">keuntungan yang bisa kita dapatkan</a> karena <a href="http://www.fastcoexist.com/1679559/want-to-boost-the-economy-boost-internet-speeds">memiliki akses internet cepat</a>.</p>

<blockquote><p><em>Anyway,</em> di zaman yang sudah serba digital ini, dimana bahkan Nenek saya sudah biasa Skype / Facetime dengan anaknya di luar negeri, akses Internet sudah menjadi salah satu kebutuhan pokok banyak orang. Dan seperti yang sudah banyak diteliti &amp; dibahas, akses broadband / internet kecepatan tinggi akan membuka banyak peluang ekonomi bagi masyarakat.</p></blockquote>

<p>Di sisi lain, kita juga menjadi paham bahwa <a href="http://en.wikipedia.org/wiki/Category:Internet_culture"><em>internet culture</em></a> tidak selamanya baik. Ya,&hellip; begitulah.</p>

<p>Sebagai contoh, pada awal kemunculan milis dan IRC di awal 2000-an, kita sering sekali mendengar berita hoax atau berita yang tidak benar. Berita hoax ini biasanya mengejutkan, sehingga mungkin banyak orang langsung meneruskan informasi ini ke orang lain tanpa mengecek terlebih dahulu kebenarannya. Salah satu hoax yang terjadi pada saat itu adalah <a href="https://groups.yahoo.com/neo/groups/halal_baik_enak/conversations/topics/3387">hoax mengenai KFC:</a></p>

<blockquote><p>Assalamu&#8217;alaikum wr.wb,</p>

<p>Tentang berita ayam KFC itu adalah hoax email. Harian Suara karya kurang
teliti dalam menanggapi berita ayam KFC yang sudah terlanjur tersebar di
internet.</p>

<p>Kenyataannya :</p>

<ol>
<li>Tidak pernah ada study tentang KFC dilakukan di University of New
Hampshire.</li>
<li>KFC biasanya tidak mengembangkan atau membiakkan sendiri ayamnya, tapi
membeli dari peternak yang sudah dipilih.</li>
<li>Kentucky Fried Chicken sudah berubah nama menjadi KFC sejak tahun
1991, bukan baru-baru ini.</li>
<li>KFC sendiri memberi nama produk ayamnya seperti Original
Recipe&trade;Chicken, Tender Roast Chicken dll.</li>
</ol>
</blockquote>

<p>Ya, hoax itu memang cerita lama. Saya pikir, pengguna internet sudah <em>aware</em> dengan hal-hal yang kredibilitasnya dipertanyakan seperti ini. Tetapi entah kenapa, <em>hal tersebut muncul lagi sekarang.</em> Hoax mengenai presiden dan pemilu. Hoax mengenai islam. Hoax mengenai&hellip;. ah, terlalu banyak.</p>

<p><strong>Dan anehnya, banyak yang <em>nge-share</em> itu berita hoax itu di Facebook.</strong></p>

<p>Bermunculanlah istilah-istilah seperti <em>flamebait</em>, <em>hoax</em>, dan&hellip;. <a href="http://en.wikipedia.org/wiki/Godwin%27s_law">Hukum Godwin:</a></p>

<blockquote><p>Seiring diskusi di internet berjalan semakin panjang, kemungkinan munculnya perbandingan yang menyangkut Nazi atau Hitler semakin mendekati satu.</p></blockquote>

<p>Ya, itu agak satir <em>sih,</em> intinya ada persepsi di kalangan pengguna internet bahwa beberapa diskusi di internet MUNGKIN menjadi irrasional pada waktu tertentu. Ya, sebagaimana Anda juga pasti memperhatikannya. Tahun lalu, media sosial cukup panas dengan berita-berita <em>flamebait.</em> <em>Oh well,</em> bahkan sampai sekarang saya masih melihat <a href="https://riemetalui.wordpress.com/2015/04/18/recent-economic-and-financial-indicators-report/">post-post blog yang isinya biasa saja tapi komentarnya panas luar biasa</a>.</p>

<h4>But.. Why??</h4>

<p>/huft</p>

<p>Menurut saya, <strong>ini wajar.</strong> Ibarat manusia, mungkin kita masih anak umur tujuh belas tahunan yang labil sekali dan meledak-ledak. Ya, kita baru saja mendapatkan sesuatu yang bernama internet. <em>Hey internet sudah lama loh, 1990an awal juga udah ada.</em> Ya, tapi <strong>dulu pengguna internet masih dalam kalangan terbatas.</strong> Sekarang, sudah lima belas persen. Bahkan di kota besar, <a href="http://apjii.or.id/v2/upload/Laporan/Profile%20of%20Indonesian%20Internet%20Users%202012%20(ENGLISH).pdf">pengguna internet sudah mencapai tiga puluh persen dari populasi</a>. (<a href="http://fs.skyandmurmur.com/apjii/Profile%20of%20Indonesian%20Internet%20Users%202012%20%28ENGLISH%29.pdf">mirror</a>)</p>

<p><img src="http://mufid.github.io/images/post/internet-jakarta.png" alt="Pengguna Internet di Jawa" /></p>

<p>Tapi sampai kapan kita akan menemui flame bait seperti ini?</p>

<p>Entahlah. Berkaca pada perkembangan internet di US dari grafik di atas dan beberapa fakta sejarah <em>internet culture</em>, mungkin, kita harus menghadapi ini sampai sepuluh tahun lagi?</p>

<p>Apa yang bisa kita perbuat untuk mengurangi flamebait?</p>

<p>Entahlah. Kami pengguna internet sejak lama dan tidak tahu. Jika Anda ingin melakukan studi banding, <a href="http://www.theguardian.com/technology/2013/nov/26/youtube-spam-comments-google-plus">Youtube membuat komentar harus dibuat oleh manusia yang menampakkan jati dirinya.</a>. Mungkin, Anda memiliki cara yang lebih baik?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A simple pattern in Java: equals]]></title>
    <link href="http://mufid.github.io/blog/2014/pattern-java-equals/"/>
    <updated>2014-10-28T20:16:00+00:00</updated>
    <id>http://mufid.github.io/blog/2014/pattern-java-equals</id>
    <content type="html"><![CDATA[<p>Di Java, kita menggunakan <code>.equals()</code> untuk membandingkan suatu <em>instance</em> apakah bernilai sama atau tidak. Yang masalah adalah ketika Anda membandingkan nilai null. Mari kita ambil contoh kasus sederhana: validasi apakah suatu email dari user berhak mendapatkan bingkisan spesial atau tidak dari nilai yang sudah ditentukan. Misalnya kodenya seperti ini:</p>

<pre><code>String email = request.getEmail();
if (email.equals("yui.hirasawa@example.com")) {
  condition.fullfilled();
  return;
}
condition.fail();
</code></pre>

<p>Ada yang aneh dari kode di atas? Tidak ada. Kode di atas sempurna, sampai Anda menyadari bahwa <strong>email bisa bernilai null</strong>. Akhirnya, equals akan dipanggil ke null. Hal ini menyebabkan NullPointerException. Sehingga, Anda perlu menambahkan hal seperti ini:</p>

<pre><code>String email = request.getEmail();
if (email == null) {
  condition.fail();
  return;
}
if (email.equals("yui.hirasawa@example.com")) {
  condition.fullfilled();
  return;
}
condition.fail();
</code></pre>

<p>Well&hellip; bisa sih, tapi sebetulnya agak melelahkan. Coba perhatikan bahwa predefined email sudah pasti ada, tetapi email input bisa saja null. Kita bisa mencegah exception karena NullPointerException tanpa menambah baris kode sama sekali:</p>

<pre><code>String email = request.getEmail();
if ("yui.hirasawa@example.com".equals(email)) {
  condition.fullfilled();
  return;
}
condition.fail();
</code></pre>

<p>TL;DR: Di Java, jika Anda menggunakan equals, dan salah satu objek dari dua objek yang dibandingkan mungkin mengandung nilai null, maka <strong>panggil <code>.equals()</code> dari objek yang sudah pasti bukan null</strong>.</p>

<p>Happy Coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aku]]></title>
    <link href="http://mufid.github.io/blog/2014/aku/"/>
    <updated>2014-10-12T12:41:00+00:00</updated>
    <id>http://mufid.github.io/blog/2014/aku</id>
    <content type="html"><![CDATA[<p><em>My lovely country is indeed awesome!</em></p>

<p><img src="http://mufid.github.io/images/post/indonesia-lang.jpg" alt="" /></p>

<p><a href="https://www.facebook.com/Languages.Alino1/photos/a.320819614683664.71044.318757448223214/670023456429943/?type=1&amp;theater">Source</a>
<a href="http://www.latg.org/2014/09/indonesian-language.html">More</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DNS Speedy Lambat]]></title>
    <link href="http://mufid.github.io/blog/2014/speedy-dns-slow/"/>
    <updated>2014-09-20T07:54:00+00:00</updated>
    <id>http://mufid.github.io/blog/2014/speedy-dns-slow</id>
    <content type="html"><![CDATA[<p>Jadi, saya menghidupkan VPN di San Fransisco.
Kalau saya sambungkan komputer saya ke VPN saya;
ajaib, saya browsing apapun terasa cepat sekali.
Akan tetapi, saya tidak merasa ada penurunan
kecepatan internet. Saya curiga ada masalah di DNS.
Oleh karena itu, mari kita cari tahu.</p>

<!-- more -->


<p>Pertama, VPN saya <em>by default</em> menggunakan Google
DNS. Saya pastikan bahwa saya tidak bohong dan
tidak dibohongi:</p>

<figure class='code'><figcaption><span>mark:14 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@classifier:/vagrant$ dig -x 8.8.8.8
</span><span class='line'>
</span><span class='line'>    ; &lt;&lt;>> DiG 9.8.1-P1 &lt;&lt;>> -x 8.8.8.8
</span><span class='line'>    ;; global options: +cmd
</span><span class='line'>    ;; Got answer:
</span><span class='line'>    ;; ->>HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 64887
</span><span class='line'>    ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0
</span><span class='line'>
</span><span class='line'>    ;; QUESTION SECTION:
</span><span class='line'>    ;8.8.8.8.in-addr.arpa.          IN      PTR
</span><span class='line'>
</span><span class='line'>    ;; ANSWER SECTION:
</span><span class='line'>    8.8.8.8.in-addr.arpa.   86361   IN      PTR     google-public-dns-a.google.com.
</span><span class='line'>
</span><span class='line'>    ;; Query time: 85 msec
</span><span class='line'>    ;; SERVER: 10.0.2.3#53(10.0.2.3)
</span><span class='line'>    ;; WHEN: Sat Sep 20 00:51:33 2014
</span><span class='line'>    ;; MSG SIZE  rcvd: 82</span></code></pre></td></tr></table></div></figure>


<p><em>(Ah iya, maaf, saya sedang login di Vagrant, jadi saya pakai Vagrant)</em></p>

<p>Tidak ada masalah. Saya benar tersambung dengan Google DNS (lihat
rekaman PTR. Perhatikan Query Time nya juga di 4 baris dari terakhir).</p>

<p>Sekarang, mari kita bermain dengan Speedy DNS aka. Telkom DNS:</p>

<figure class='code'><figcaption><span>mark:19 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@classifier:/vagrant$ dig -x 118.98.44.10
</span><span class='line'>
</span><span class='line'>    ; &lt;&lt;>> DiG 9.8.1-P1 &lt;&lt;>> -x 118.98.44.10
</span><span class='line'>    ;; global options: +cmd
</span><span class='line'>    ;; Got answer:
</span><span class='line'>    ;; ->>HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 57154
</span><span class='line'>    ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 2, ADDITIONAL: 0
</span><span class='line'>
</span><span class='line'>    ;; QUESTION SECTION:
</span><span class='line'>    ;10.44.98.118.in-addr.arpa.     IN      PTR
</span><span class='line'>
</span><span class='line'>    ;; ANSWER SECTION:
</span><span class='line'>    10.44.98.118.in-addr.arpa. 86400 IN     PTR     10.subnet118-98-44.astinet.telkom.net.id.
</span><span class='line'>
</span><span class='line'>    ;; AUTHORITY SECTION:
</span><span class='line'>    44.98.118.in-addr.arpa. 86400   IN      NS      dns1.telkom.net.id.
</span><span class='line'>    44.98.118.in-addr.arpa. 86400   IN      NS      dns2.telkom.net.id.
</span><span class='line'>
</span><span class='line'>    ;; Query time: 1057 msec
</span><span class='line'>    ;; SERVER: 10.0.2.3#53(10.0.2.3)
</span><span class='line'>    ;; WHEN: Sat Sep 20 00:51:42 2014
</span><span class='line'>    ;; MSG SIZE  rcvd: 135</span></code></pre></td></tr></table></div></figure>


<blockquote><p>WAT? 1057 msec? APA APAAN NIH? Gimana ceritanya saya bisa query DNS
ke US lebih cepat daripada query DNS ke negara sendiri!</p></blockquote>

<p>Karena saya penasaran, saya coba ping keduanya:</p>

<figure class='code'><figcaption><span>mark:1,12 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant@classifier:/vagrant$ ping 8.8.8.8
</span><span class='line'>    PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
</span><span class='line'>    64 bytes from 8.8.8.8: icmp_req=1 ttl=48 time=304 ms
</span><span class='line'>    64 bytes from 8.8.8.8: icmp_req=2 ttl=48 time=241 ms
</span><span class='line'>    64 bytes from 8.8.8.8: icmp_req=3 ttl=48 time=241 ms
</span><span class='line'>    64 bytes from 8.8.8.8: icmp_req=4 ttl=48 time=240 ms
</span><span class='line'>    ?
</span><span class='line'>    --- 8.8.8.8 ping statistics ---
</span><span class='line'>    4 packets transmitted, 4 received, 0% packet loss, time 3006ms
</span><span class='line'>    rtt min/avg/max/mdev = 240.019/256.838/304.573/27.565 ms
</span><span class='line'>
</span><span class='line'>    vagrant@classifier:/vagrant$ ping 118.98.44.10
</span><span class='line'>    PING 118.98.44.10 (118.98.44.10) 56(84) bytes of data.
</span><span class='line'>    64 bytes from 118.98.44.10: icmp_req=13 ttl=252 time=24.9 ms
</span><span class='line'>    64 bytes from 118.98.44.10: icmp_req=14 ttl=252 time=25.5 ms
</span><span class='line'>    64 bytes from 118.98.44.10: icmp_req=15 ttl=252 time=25.3 ms
</span><span class='line'>    64 bytes from 118.98.44.10: icmp_req=17 ttl=252 time=23.8 ms
</span><span class='line'>    64 bytes from 118.98.44.10: icmp_req=26 ttl=252 time=168 ms
</span><span class='line'>    64 bytes from 118.98.44.10: icmp_req=27 ttl=252 time=24.3 ms
</span><span class='line'>    64 bytes from 118.98.44.10: icmp_req=30 ttl=252 time=90.9 ms
</span><span class='line'>    64 bytes from 118.98.44.10: icmp_req=31 ttl=252 time=212 ms
</span><span class='line'>    ?
</span><span class='line'>    --- 118.98.44.10 ping statistics ---
</span><span class='line'>    31 packets transmitted, 8 received, 74% packet loss, time 30232ms
</span><span class='line'>    rtt min/avg/max/mdev = 23.830/74.471/212.579/71.128 ms</span></code></pre></td></tr></table></div></figure>


<p>Nah ini. Kenapa query DNS ke negara sendiri bisa lebih lambat
daripada ke negara orang? Note: Saya gak percaya, jangan-jangan
saya masih tersambung ke VPN saya. Sayang sekali, saya tidak
bisa melakukan traceroute dari sini.</p>

<p>Tetapi jika Anda mengalami masalah yang sama, boleh coba
Anda cek, Anda konek ke VPN Anda, kemudian ping ke 8.8.8.8.
Catat hasilnya, putuskan sambungan ke VPN Anda, kemudian
ping ke 118.98.44.10 dan apakah hasilnya sama? Mungkin
dari situ kita bisa saling periksa hasilnya.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memasang Discourse di Ubuntu Server 14.04]]></title>
    <link href="http://mufid.github.io/blog/2014/discourse/"/>
    <updated>2014-06-25T18:52:00+00:00</updated>
    <id>http://mufid.github.io/blog/2014/discourse</id>
    <content type="html"><![CDATA[<p>Discourse sepertinya akan menjadi hype. Sudah
mulai banyak adopsi Discourse di beberapa forum.
Anda sendiri juga bisa melakukannya. Baiklah,
kalau begitu, mari kita coba memasang Discourse!</p>

<!-- more -->


<h2>In ASCIINema</h2>

<script type="text/javascript" src="https://asciinema.org/a/10462.js" id="asciicast-10462" async></script>


<p><a href="https://asciinema.org/a/10462">https://asciinema.org/a/10462</a></p>

<h2>Persiapan VirtualBox</h2>

<p>Saya menggunakan VirtualBox 4 dengan port
forwarding (agar bisa langsung mengakses localhost).
Adapun konfigurasi port forwardingnya sebagai
berikut:</p>

<pre><code>coming soon...
</code></pre>

<h2>Menginstall Discourse</h2>

<p>Well, H1 ini cuman iseng. Abaikan. Biar
SEOnya bagus, <em>gitu</em>.</p>

<p>Btw, semua instruksi di sini sudah saya uji coba
ulang dengan VirtualBox. Seharusnya, Anda bisa
mengikuti semua instruksi di sini tanpa
ada masalah.</p>

<h2>Bumbu Masak</h2>

<p><a href="https://github.com/discourse/discourse/blob/master/docs/INSTALL.md">Sesuai saran dari tim Discourse sendiri</a>,
instalasi sebaiknya menggunakan Docker. Hal ini
karena Discourse membutuhkan banyak sekali <em>dependency</em>.
<em>Dependency</em> ini akan cukup repot jika dipasang
secara terpisah. Oleh karena itu, gunakan saja
Docker.</p>

<p>Di sini, saya akan menguji coba instalasi dengan
Ubuntu Server 14.04. Anda bisa mendapatkan
<em>image</em> dari Ubuntu Server 14.04 dari <a href="http://kambing.ui.ac.id/iso/ubuntu/releases/14.04/">kambing.ui.ac.id</a>.
Jangan lupa, x64 (sesuai yang disarankan). Oh iya,
di dokumen resmi Docker, Ubuntu 14.04 tidak termasuk
dalam sistem operasi yang didukung. Tidak masalah,
kita coba saja, yay!</p>

<p><img src="http://mufid.github.io/images/post/download-ubuntu.png" alt="Menyenangkan sekali download dari UI" /></p>

<p>Saya akan mencoba ini semua di VirtualBox. Lakukan
instalasi seperti biasa. Kita akan kembali setelah Anda
melakukan instalasi OSnya.</p>

<h2>Memulai Instalasi Docker</h2>

<p>Anda sudah mengetahui bahwa Discourse merupakan
aplikasi Rails. Pada kenyataannya, Anda tidak
perlu install Rails. Anda juga tidak perlu install
Redis dan kawan-kawannya, meski ini dibutuhkan
oleh Discourse. Hal ini karena semua
instalasi akan diabstrasikan oleh Docker.
Kalau begitu, kita lanjutkan saja
dengan <a href="http://docs.docker.com/installation/ubuntulinux/">menginstall Docker</a>.</p>

<pre><code>sudo apt-get install curl
curl -s https://get.docker.io/ubuntu/ | sudo sh
</code></pre>

<blockquote><p>Catatan: Instruksi di atas berlaku untuk
Ubuntu 14.04, yang mana <em>kernel</em>nya sudah
kompatibel dengan virtualisasi Docker</p></blockquote>

<p>Okeh, sekarang Docker sudah dipasang. Anda bisa
pastikan dengan melihat versinya:</p>

<pre><code>docker --version
</code></pre>

<p>Setelah itu, buat sebuah folder discourse docker:</p>

<pre><code>install -g docker -m 2775 -d /var/docker
</code></pre>

<p>Tambahkan user Anda ke user Docker agar kita bisa
utak-atik. Dalam hal ini, nama user saya adalah maru:</p>

<pre><code>usermod -a -G docker maru # Sesuaikan
</code></pre>

<h2>Memasang <code>discourse_docker</code></h2>

<p>Sekarang, saatnya memasang docker dengan resep
Discourse.</p>

<ol>
<li><p>Clone</p>

<pre><code> git clone https://github.com/discourse/discourse_docker.git /var/docker
</code></pre></li>
<li><p>Pergi ke repo docker_discourse</p>

<pre><code> cd /var/docker
</code></pre></li>
<li><p>Salin konfigurasi default</p>

<pre><code> cp samples/standalone.yml containers/app.yml
</code></pre>

<p> Sebetulnya Anda bisa langsung lanjut ke langkah
 selanjutnya. Akan tetapi, mungkin Anda tertarik
 untuk melihat isi konfigurasi <em>expose</em> dari
 <code>app.yml</code> ini. Ubah semua isi <code>app.yml</code> yang
 jika dirasa dibutuhkan. Anda mungkin tertarik
 untuk melihat konfigurasi pada bagian <code>bindings</code>
 dan <code>volumes</code>.</p></li>
<li><p>Lakukan <em>boostrapping</em>. Tepat sekali, proses ini
agak lama, jadi silahkan buat kopi dan nikmati
sejenak. Atau, Anda dapat menyaksikan
tayangan-tayangan yang <a href="http://hummingbird.me/anime/clannad-after-story">menggugah hati,
menyayat pikiran, dan memberikan inspirasi</a>. Pengalaman
Saya, ini membutuhkan waktu kurang lebih 60 menit.</p>

<pre><code> sudo ./launcher bootstrap app
 # Yeah, hanya satu baris, tapi lama, banget.
</code></pre></li>
<li><p>Fiyuh, setelah semua <em>dependency</em> diselesaikan,
akhirnya kita bisa memulai <em>image</em>-nya:</p>

<pre><code> sudo ./launcher start app
</code></pre></li>
</ol>


<p>Selesai! Mari kita lakukan web config</p>

<h2>Konfigurasi <em>on-site</em> Discourse</h2>

<p>Cihuy, Discourse sudah bisa digunakan!
Sekarang, Anda tinggal mengikuti
instruksi di halaman webnya saja
dari browser.</p>

<p><img src="http://mufid.github.io/images/post/discourse-welcome.png" alt="Welcome to Discourse" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Repo Review: Sliding Up (Android)]]></title>
    <link href="http://mufid.github.io/blog/2014/sliding-up/"/>
    <updated>2014-04-11T05:41:00+00:00</updated>
    <id>http://mufid.github.io/blog/2014/sliding-up</id>
    <content type="html"><![CDATA[<p>Anda mengetahui bahwa Google Maps dan Google Play Music memiliki fitur
sliding up yang sangat keren. Anda geser bar bawah, Anda akan diberikan
fragment yang berbeda. Rekan seperjuangan Saya, <a href="https://github.com/des-k">des-k</a>,
menemukan sebuah kepustakaan yang keren sekali (Thanks, Ade, for mentioning!)</p>

<h3><a href="https://github.com/umano/AndroidSlidingUpPanel/">Android Sliding Up Panel</a></h3>

<p><img src="http://mufid.github.io/images/post/slidinguppanel.png" alt="sliding up panel" /></p>

<p>Mari kita review beberapa hal tentang repo ini:</p>

<ul>
<li><strong>Kegunaan:</strong> Jelas repo ini sangat berguna, kalau tidak berguna ya tidak
akan kita bahas (kecuali kita sangat iseng)</li>
<li><strong>Struktur kode:</strong> Saya tidak menganalisis secara mendalam kodenya, karena
saya juga mau berangkat (well, alhamdulillah masih bisa nulis pagi-pagi).
Tetapi <a href="https://github.com/umano/AndroidSlidingUpPanel/blob/master/library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java">Anda mungkin tertarik untuk melihat kode utamanya dan menilai sendiri.</a></li>
<li><strong>Petunjuk Instalasi:</strong> ade ternyata tidak melihat bahwa repo ini sudah
tersedia di Maven. Saya juga tidak menemukan di awalnya.
<a href="https://github.com/umano/AndroidSlidingUpPanel/issues/83">Perlu sedikit trik agar saya dapat menemukan paket instalasi Maven</a>. Saya belum mengujinya,
tetapi beberapa sumber mengatakan ini fiktif. Saya pun
<a href="http://mvnrepository.com/search.html?query=com.sothree.slidinguppanel">tidak menemukan ini tersedia di Maven.</a></li>
</ul>


<p>Di masa depan, mungkin Anda butuh repo ini. Silahkan jangan sungkan men-star repo ini :D.</p>

<p>Gambar dari <a href="https://raw.github.com/umano/AndroidSlidingUpPanel/master/slidinguppanel.png">repo asli</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internet dan Privasi]]></title>
    <link href="http://mufid.github.io/blog/2014/internet/"/>
    <updated>2014-03-23T11:04:00+00:00</updated>
    <id>http://mufid.github.io/blog/2014/internet</id>
    <content type="html"><![CDATA[<p>Yay, akhirnya setelah sekian lama enggak nulis, kita bisa nulis lagi :D</p>

<p>Kali ini adalah tentang internet dan privasi. Secara umum, terkait privasi, kita bisa membagi manusia menjadi dua golongan.</p>

<p>Golongan pertama adalah yang mendukung informasi publik Anda di internet. Anda saat mendaftar Google+ dan Facebook diminta untuk memberikan identitas asli kan? Golongan kedua adalah yang mendukung informasi di internet harus anonim. Contohnya saat Anda mendaftar Kaskus atau forum-forum, pada umumnya Anda tidak diminta memasukkan nama asli dan identitas-identitas pribadi Anda (kecuali email).</p>

<p>Saya termasuk pribadi yang mendukung golongan kedua dan saya memiliki alasan kenapa saya mendukung golongan kedua.</p>

<p>Di Indonesia, masih terlalu banyak orang yang tidak merasa data pribadinya tidak penting. Padahal, bukankah dari kecil kita sudah diajarkan oleh orang tua kita untuk tidak memberikan alamat rumah dan nomor telepon kepada orang yang tidak kita kenal? Sekarang, kenapa kita mudah sekali memberikan data kita ke sebuah layanan yang bahkan Anda sendiri tidak tahu bagaimana data itu disimpan?</p>

<p><em>Think again.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Porno]]></title>
    <link href="http://mufid.github.io/blog/2014/porn/"/>
    <updated>2014-02-18T07:40:00+00:00</updated>
    <id>http://mufid.github.io/blog/2014/porn</id>
    <content type="html"><![CDATA[<p>Di Facebook sedang ramai membahas <a href="http://islamisfun.wordpress.com/2014/02/16/karena-bu-risma">Hal-hal yang memiliki korelasi dengan dialog Bu Risma di Mata Najwa</a>.
Pembahasan lebih diarahkan pada salah satu kalimat di sana yaitu <a href="http://www.youtube.com/watch?v=hvrf1Img0C0&amp;feature=youtu.be&amp;t=27m">pelanggan PSK 60 tahun-an adalah anak SD-SMP</a>.</p>

<p>Sayangnya, artikel tersebut cukup panjang. Jika Anda cukup malas untuk membacanya, Anda bisa menggunakkan text summarizer seperti
<a href="http://www.textteaser.com/">TextTeaser</a>. Atau, saya telah mengambil beberapa poin penting di artikel tersebut.</p>

<!-- more -->


<p>Sebelum Anda menuduh saya plagiat, saya tegaskan sekali lagi: Ini hanya kalimat-kalimat yang saya potong dari <a href="http://islamisfun.wordpress.com/2014/02/16/karena-bu-risma/">artikel asli mba pipichan</a>, plus sedikit tambahan komentar dari saya.</p>

<p>Btw, penulis banyak menggunakan ayat-ayat Quran sebagai landasannya. Meski demikian, disebutkan juga hasil riset psikologi yang sejalan. Dengan demikian, saya pikir tulisan ini cocok untuk dibaca untuk semua kalangan.</p>

<p>Saya tidak memiliki masalah saat membaca beberapa paragraf awal:</p>

<blockquote><p>.. anak PUTRA menjadi jauh lebih sexually active daripada anak putri. Oleh karenanya pertanyaan putra mengenai seks dan seksualitas sangat liar dan jumlahnya mencapai 138 pertanyaan berbeda dari 50 responden</p>

<p>Sedangkan pertanyaan putri masih sangat selugu usianya dan lebih banyak mengenai gkapan sih pacaran dibolehkan?h atau gmenstruasi itu apa?h</p>

<p>Bahkan kakak-kakak DIAR pernah nemu gambar : anak kecil pacaran, dikepala masing-masing ada baloon, baloon di kepala cewe gambarnya elove-hatif, tau ga baloon di kepala cowo gambarnya apa? gambar elove-hatif juga, tapi..</p>

<p>Jadi bilang sama adek-adek perempuan kita tersayang, ghoney, jangan mau deh ditipu-tipu ama kata pacaranh</p>

<p>Ibu Risma bercerita, anak-anak yang menjadi pelanggan PSK adalah juga anak-anak yang telah terpapar lingkungan lokalisasi. Artinya, stimulasi anak-anak itu terhadap aktifitas seksual sudah tidak dapat difilter. Mereka sangat sexually active. Bayangkan, dalam kondisi demikian, sedangkan teman sebaya mereka (anak putri) masih belum kepikiran yang begitu-begituan, mau lari kemana anak-anak putra kita tersebut? Ya! Lokalisasi jawabannya.</p></blockquote>

<p>Tetapi, jadi luar biasa mindblown ketika masuk di paragraf berikut. Saya tidak bisa lagi men-skip paragraf demi paragraf tersebut.</p>

<blockquote><p>Kita mundur ke belakang sedikit, mengenai paparan anak terhadap aktifitas seksual. Hey kalian para wanita yang kelak akan memiliki anak laki-laki, atau kalian yang punya adik laki-laki, dan kalian para lelaki yang akan menjadi penanggung jawab anggota keluarga kalian, berhati-hatilah.. jagalah mereka. Kenapa? Paparan itu halus. Kasus dari ibu Risma adalah paparan ekstrim. Tapi taukah bahwa paparan itu juga bisa sedikit-sedikit disisipi dari hal yang sama sekali tidak kita anggap eketerlaluanf?</p>

<p>Iklan handuk, iklan pakaian dalam, iklan sabun, iklan parfum, ah iklan apapun yang menunjukkan keindahan tubuh wanita, itu adalah tombol ON untuk memasukkan konten ekotorf selanjutnya secara bertahap dan bertingkat. Pelaku industri pornografi tau betul hal ini. Riset mereka jauh lebih canggih dari yang kita bayangkan. Randy Hyde, seorang psikolog terapis pornografi sekaligus kolega pakar neurosains Donald Hilton mengatakan bahwa sekali tombol ON itu nyala, kita ga bisa matiin lagi. Kita cuma bisa ngerem dengan susah payah.
Konten ekotorf itu masuk secara bertahap dan samar sekali. Bermula dari legal content seperti iklan, majalah remaja yang menampilkan pakaian kurang bahan, apapun lah yang diijinkan pemerintah kita, yang kita sendiri pun menganggap hal itu lumrah. Kemudian meningkat menjadi soft porn seperti majalah pria dewasa. Kemudian meningkat lagi ke komik dan film hollywood yang punya adegan lalalalanya. Kemudian meningkat lagi ke games tembak-tembakan yang kalo menang dapet hadiah cewe yang boleh diapa-apain (ini yang mengakibatkan munculnya istilah ecabe-cabeanf, ajib yaa.. bermula dari games!). Dan selanjutnya ke atas sampe muncullah berita-berita kasus perkosaan dan pembunuhan.</p>

<p>Apa yang terjadi pada anak yang terpapar? Kalo yang diliat masih iklan pakean renang sih paling pertama kali responnya kaget, jijik, malu sendiri. Nah, sebelum saya jelasin eskalasinya, saya mau jelasin isi kepala kita dulu ya : OTAK.</p>

<p>Jadi ya temen-temen, Jordan Grafman, PhD, peneliti Neuroscience dari University of Wisconsin-Madison bilang, pada otak manusia, ada bagian yang didesain khusus oleh Tuhan untuk membedakan manusia dari spesies lain, sebagai spesies paling sempurna, yaitu memiliki kemampuan untuk memilih dan memiliki adab atau nilai-nilai fitrah (kebenaran). Artinya apa? ANAK ITU DILAHIRKAN GA POLOS, TAPI UDAH DI INSTALL NILAI-NILAI KEBAIKAN OLEH PENCIPTANYA.</p>

<p>(gambar)
Kabar buruknya, bagian itu matengnya baru di usia 25 tahun. Gue mendadak inget kalimatnya Uncle Ben di Spiderman 1 pas nyindir Peter yang bandel di usianya yang 25, gPeter, these are the years when a man changes into the man hefs going to be for the rest of his life. Just be careful who you change into.h. (OOT, pelem luar negri emang kuat banget risetnya yak). OLEH KARENA ITU JUGA, wahai orang dewasa, sabar sama anak-anak.. otaknya belum bersambungan.. berhenti marahin anak-anak dan berlaku kasar terhadap mereka, anaknya salah ya orangtuanya yang kudu bener ngasuhnya. Nah, kabar baiknya, kalo pola pengasuhan keluarganya baik, itu direktur bisa mateng lebih cepet.</p>

<p>Paparan pornografi dan nilai-nilai buruk bisa membunuh direktur sangat perlahan. Ini bukan saya yang bilang yaa.. itu yang bilang Dr. Donald Hilton Jr, Psikoterapis dan Ahli Neurosurgical dari University of Texas. Beliau sahabat Ibu Elly dan pernah diundang Buah Hati buat ngadain seminar bareng Kemenkes buat ngejelasin bahwa kerusakan otak orang yang adiksi pornografi itu kalo dilihat di MRI sama persis dengan kerusakan otak orang yang kecelakaan naik mobil ferrari dengan kecepatan sangat tinggi. Kalo narkoba ngerusak otak di 3 bagian, obesitas ngerusak otak di 2 bagian, pornografi ngerusak otak di LIMA bagian.</p></blockquote>

<p>&hellip; selanjutnya, saya membaca setiap paragraf di sana.</p>

<p>summary ini saya tutup dengan paragraf yang mind blow:</p>

<blockquote><p>Yang menyedihkan, matinya sang Direktur ini bahkan bisa membuat anak kehilangan atau kebingungan orientasi seksualnya. Maka muncul generasi LGBT. Lesbian. Gay. Biseksual. Transgender (kecuali yang sindrom Klinefelter). Cek lah, kalo disuruh cerita, udah bisa dipastiin perasaan gpenyimpangan seksualh ini mulai dirasa anak sejak kecil walau ga jelas umurnya.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter dan Kelucuannya]]></title>
    <link href="http://mufid.github.io/blog/2014/twitter-wut/"/>
    <updated>2014-01-17T13:01:00+00:00</updated>
    <id>http://mufid.github.io/blog/2014/twitter-wut</id>
    <content type="html"><![CDATA[<p><em>Coba deh kosongin user description Twitter</em></p>

<p><img src="http://mufid.github.io/images/post/twitter-konyol.png" alt="twitter-konyol" /></p>

<p>Wow Twitter, selera humornya bagus sekali</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membuat Proxy Server di Python 3]]></title>
    <link href="http://mufid.github.io/blog/2013/proxy-in-python-3/"/>
    <updated>2013-12-08T04:58:00+00:00</updated>
    <id>http://mufid.github.io/blog/2013/proxy-in-python-3</id>
    <content type="html"><![CDATA[<p>Wah lama gak ngepost :D</p>

<p>Baiklah, jadi ceritanya ada tugas jaringan komputer dan ini membuat Proxy. Mari kita buat hidup kita lebih sederhana dengan memahami bagaimana proxy bekerja.</p>

<p>Berhubung ini adalah post Proof of Concept, maka post kali ini akan sangat panjang. Pastikan Anda sudah membeli Siomay atau Pizza untuk menemani Anda membaca post ini. Atau Anda juga dapat <a href="http://myanimelist.net/anime/6547/Angel_Beats!">menyiapkan anime yang menggugah semangat untuk menambah semangat Anda dalam membaca post ini</a>.</p>

<p>Selamat menikmati! (makanan dan postnya, tentu saja).</p>

<p>(Note: Saya mohon kritik Anda apabila penjelasan saya di sini ada yang misleading atau sulit dipahami. Dengan demikian saya bisa menghasilkan tulisan dengan kualitas tulisan yang lebih baik lagi ^_^)</p>

<!-- more -->


<h2>The Tools</h2>

<p>Agar hidup ini lebih menyenangkan saat menggunakkan Windows, saya menggunakkan beberapa perkakas seperti Mingw dan PyCharm. Semua tools tersebut tersedia gratis di internet.</p>

<h2>The Proxy</h2>

<p><code>mahasiswa.cs.ui.ac.id</code> adalah sebuah server web yang melayani halaman <code>public_html</code> dari setiap <code>~</code> (home folder) mahasiswa CSUI ke internet publik. Mari kita lihat apa yang terjadi apabila saya membuka halaman web mahasiswa.cs.ui.ac.id. Tentu saja, di sini saya memakai &ldquo;debug mode&rdquo;. Kita gunakan <code>curl</code> dengan verbose mode agar dapat mengetahui apa yang sebenarnya terjadi.</p>

<pre><code>D:\tmp&gt;curl -v mahasiswa.cs.ui.ac.id
* Adding handle: conn: 0x4c2cf0
* Adding handle: send: 0
* Adding handle: recv: 0
* Curl_addHandleToPipeline: length: 1
* - Conn 0 (0x4c2cf0) send_pipe: 1, recv_pipe: 0
* About to connect() to mahasiswa.cs.ui.ac.id port 80 (#0)
*   Trying 152.118.148.93...
* Connected to mahasiswa.cs.ui.ac.id (152.118.148.93) port a80 (#0)
&gt; GET / HTTP/1.1
&gt; User-Agent: curl/7.30.0
&gt; Host: mahasiswa.cs.ui.ac.id
&gt; Accept: */*
&gt;
&lt; HTTP/1.1 200 OK
&lt; Date: Sat, 07 Dec 2013 22:01:58 GMT
* Server Apache/2.2.22 (Debian) is not blacklisted
&lt; Server: Apache/2.2.22 (Debian)
&lt; Last-Modified: Tue, 27 Mar 2012 14:08:11 GMT
&lt; ETag: "5ba68-b1-4bc3a055dc8c0"
&lt; Accept-Ranges: bytes
&lt; Content-Length: 177
&lt; Vary: Accept-Encoding
&lt; Content-Type: text/html
&lt; Via: 1.1 mahasiswa.cs.ui.ac.id
&lt;
&lt;html&gt;&lt;body&gt;&lt;h1&gt;It works!&lt;/h1&gt;
&lt;p&gt;This is the default web page for this server.&lt;/p&gt;
&lt;p&gt;The web server software is running but no content has been added, yet.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
* Connection #0 to host mahasiswa.cs.ui.ac.id left intact

D:\tmp&gt;
</code></pre>

<p><strong>Apa yang sebenarnya terjadi?</strong></p>

<p>Dalam mengakses internet, client (bisa browser, bisa program kecil seperti curl/wget, etc.) akan membuka koneksi ke server melalui socket. Apa yang client kirimkan setelah membuka koneksi? Mengirimkan baris-baris yang ditandai dengan <code>&gt;</code>. Setelah <code>\r\n</code> kosong, server akan menganggap client selesai mengirimkan <strong>HTTP Request</strong> dan akan memulai memberikan respons (<strong>HTTP Response</strong>) yang ditandai dengan <code>&lt;</code>.</p>

<p>Tugas Proxy sederhana. Dia menjadi jembatan antara Client dan Server. Tetapi yang menarik adalah <strong>Proxy behave sebagai server sungguhan dengan hanya menyunting satu baris saja</strong>. Kita lihat apa yang terjadi jika kita mengatur proxy di komputer kita. Kali ini saya akan memakai proxy fiktif. Fokus kita di sini adalah mengetahui bagian apa yang berubah.</p>

<pre><code>D:\tmp&gt;set HTTP_PROXY=http://example.com:80

D:\tmp&gt;curl mahasiswa.cs.ui.ac.id -v
* Adding handle: conn: 0x4c2d10
* Adding handle: send: 0
* Adding handle: recv: 0
* Curl_addHandleToPipeline: length: 1
* - Conn 0 (0x4c2d10) send_pipe: 1, recv_pipe: 0
* About to connect() to proxy example.com port 80 (#0)
*   Trying 93.184.216.119...
* Connected to example.com (93.184.216.119) port 80 (#0)
&gt; GET HTTP://mahasiswa.cs.ui.ac.id/ HTTP/1.1
&gt; User-Agent: curl/7.30.0
&gt; Host: mahasiswa.cs.ui.ac.id
&gt; Accept: */*
&gt; Proxy-Connection: Keep-Alive
&gt;
* HTTP 1.0, assume close after body
&lt; HTTP/1.0 400 Bad Request
&lt; Content-Type: text/html
&lt; Content-Length: 349
&lt; Connection: close
&lt; Date: Sat, 07 Dec 2013 22:10:10 GMT
&lt; Server: ECSF (cpm/F9B9)
&lt;
&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
         "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
        &lt;head&gt;
                &lt;title&gt;400 - Bad Request&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
                &lt;h1&gt;400 - Bad Request&lt;/h1&gt;
        &lt;/body&gt;
&lt;/html&gt;
* Closing connection 0

D:\tmp&gt;
</code></pre>

<p>Lihat bagian yang berubah? Pertama lihat baris pertama. Tadinya adalah alamat relatif terhadap host. Sekarang adalah alamat absolut. Yosh, hanya bagian itu saja. Sisanya, proxy hanya meneruskan data-data dari server (sebetulnya bisa iseng sedikit seperti mengambil password, tetapi itu di luar bahasan kita).</p>

<h2>In a Nutshell (Dalam Kulit Kacang)</h2>

<pre><code>Client
  |       Proxy bertindak seolah-olah sebagai server*
  |       jika dilihat oleh client
  |
Proxy
  |       Proxy bertindak seolah-olah sebagai client
  |       jika dilihat oleh server
  |
Server
</code></pre>

<h2>The Code</h2>

<p>Kode Templatenya adalah sebagai berikut:</p>

<figure class='code'><figcaption><span>proxy-keren.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   <span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># Create a server socket, bind it to a port and start listening</span>
</span><span class='line'>  <span class="n">tcpSerSock</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># Fill in start.</span>
</span><span class='line'>  <span class="c"># PART 1</span>
</span><span class='line'>  <span class="c"># Fill in end.</span>
</span><span class='line'>  <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># Strat receiving data from the client</span>
</span><span class='line'>    <span class="k">print</span> <span class="p">(</span><span class="s">&quot;Ready to serve...&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">tcpCliSock</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">tcpSerSock</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>    <span class="n">message</span> <span class="o">=</span> <span class="c"># PART 2</span>
</span><span class='line'>    <span class="k">print</span> <span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># Extract the filename from the given message</span>
</span><span class='line'>    <span class="k">print</span> <span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="n">filename</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">partition</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)[</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>    <span class="k">print</span> <span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>    <span class="n">fileExist</span> <span class="o">=</span> <span class="s">&quot;false&quot;</span>
</span><span class='line'>    <span class="n">filetouse</span> <span class="o">=</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">filename</span>
</span><span class='line'>    <span class="k">print</span> <span class="p">(</span><span class="n">filetouse</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>      <span class="c"># Check wether the file exist in the cache</span>
</span><span class='line'>      <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filetouse</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="s">&quot;r&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">outputdata</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'>      <span class="n">fileExist</span> <span class="o">=</span> <span class="s">&quot;true&quot;</span>
</span><span class='line'>      <span class="c"># ProxyServer finds a cache hit and generates a response message</span>
</span><span class='line'>      <span class="n">tcpCliSock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;HTTP/1.0 200 OK</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">tcpCliSock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;Content-Type:text/html</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="c"># Fill in start. # PART 3</span>
</span><span class='line'>      <span class="c"># Fill in end.</span>
</span><span class='line'>      <span class="k">print</span> <span class="p">(</span><span class="s">&quot;Read from cache&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="c"># Error handling for file not found in cache</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">IOError</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">fileExist</span> <span class="o">==</span> <span class="s">&quot;false&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># Create a socket on the proxyserver</span>
</span><span class='line'>        <span class="c"># c = # Fill in start. # Fill in end. # PART 4</span>
</span><span class='line'>        <span class="n">hostn</span> <span class="o">=</span> <span class="n">filename</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;www.&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="p">(</span><span class="n">hostn</span><span class="p">)</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>          <span class="c"># Connect to the socket to port 80</span>
</span><span class='line'>          <span class="c"># Fill in start. # PART 5</span>
</span><span class='line'>          <span class="c"># Fill in end.</span>
</span><span class='line'>          <span class="c"># Create a temporary file on this socket and ask port 80 for the file requested by the client</span>
</span><span class='line'>          <span class="n">fileobj</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">makefile</span><span class="p">(</span><span class="s">&#39;rwb&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>          <span class="n">strHeader</span><span class="o">=</span><span class="nb">str</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;GET &quot;</span><span class="o">+</span><span class="s">&quot;http://&quot;</span> <span class="o">+</span> <span class="n">filename</span> <span class="o">+</span> <span class="s">&quot; HTTP/1.0</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="n">fileobj</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">strHeader</span><span class="p">)</span>
</span><span class='line'>          <span class="c"># Read the response into buffer</span>
</span><span class='line'>          <span class="c"># Fill in start. # PART 6</span>
</span><span class='line'>          <span class="c"># Fill in end.</span>
</span><span class='line'>          <span class="c"># Create a new file in the cache for the requested file.</span>
</span><span class='line'>          <span class="c"># Also send the response in the buffer to client socket</span>
</span><span class='line'>          <span class="c"># and the corresponding file in the cache</span>
</span><span class='line'>          <span class="n">tmpFile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;./&quot;</span> <span class="o">+</span> <span class="n">filename</span><span class="p">,</span><span class="s">&quot;wb&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="c"># Fill in start. # PART 7</span>
</span><span class='line'>          <span class="c"># Fill in end.</span>
</span><span class='line'>        <span class="k">except</span><span class="p">:</span>
</span><span class='line'>         <span class="k">print</span> <span class="p">(</span><span class="s">&quot;Illegal request&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span><span class="p">:</span>
</span><span class='line'>         <span class="c"># HTTP response message for file not found</span>
</span><span class='line'>         <span class="c"># Fill in start. # PART 8</span>
</span><span class='line'>         <span class="c"># Fill in end.</span>
</span><span class='line'>         <span class="c"># Close the client and the server sockets</span>
</span><span class='line'>         <span class="n">tcpCliSock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># Fill in start. # PART 9</span>
</span><span class='line'>  <span class="c"># Fill in end.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mari kita mulai mengoding ~</p>

<h2>Part 1</h2>

<p>Bagian yang paling mudah. Karena proxy bertindak seolah-olah sebagai server terhadap client, maka proxy harus membuka koneksi port ke client.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   <span class="n">tcpSerSock</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="mi">8888</span><span class="p">))</span>
</span><span class='line'>  <span class="n">tcpSerSock</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sepertinya baris kode tersebut self-explanatory, tidak perlu dijelaskan. Mungkin yang perlu Anda perhatikan di bagian <code>listen</code>. Apa maksud dari angka di <code>listen</code>? Baca <a href="http://docs.python.org/3.3/library/socket.html#socket.socket.listen">dokumentasinya</a> saja ya :D</p>

<blockquote><p><strong>socket.listen(backlog)</strong>
Listen for connections made to the socket. The backlog argument specifies the maximum number of queued connections and should be at least 0; the maximum value is system-dependent (usually 5), the minimum value is forced to 0.</p></blockquote>

<h2>Part 2</h2>

<p>Bagian ini adalah bagian menerima koneksi dari client. Bagian ini agak tricky, tapi kita mulai dengan hal yang paling sampah terlebih dahulu:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>     <span class="n">data</span> <span class="o">=</span> <span class="n">tcpCliSock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="n">message</span> <span class="o">=</span> <span class="n">data</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mari kita coba bermain dengan curl lagi (jangan lupa menjalankan script python kesayangan kita ini terlebih dahulu). Tentu saja Anda dapat mengujinya dengan browser, tetapi buat saya atas-enter-atas-enter lebih menyenangkan daripada Alt-tab-mouse-klikkiri-go-f5-ctrlF5.</p>

<pre><code>D:\tmp&gt;python proxy-keren.py
Ready to serve...
Received a connection from: ('127.0.0.1', 52799)
b'GET HTTP:/'
b'HTTP:/'
</code></pre>

<p>Kenapa kita hanya menerima 10 byte pertama saja? Karena kita mengatur buffer untuk proxy kita hanya 10 byte. Sebetulnya, kita tinggal mengganti saja menjadi > 10 byte. Tetapi ada constraint berikut di <a href="http://docs.python.org/3.3/library/socket.html#socket.socket.recv">dokumentasi Python</a>:</p>

<blockquote><p><strong>socket.recv(bufsize[, flags])</strong>
Receive data from the socket. The return value is a bytes object representing the data received. The maximum amount of data to be received at once is specified by bufsize. See the Unix manual page recv(2) for the meaning of the optional argument flags; it defaults to zero.</p></blockquote>

<p>Kalau begitu, sebagaimana kita membaca file, mari kita baca socket hingga tidak ada isinya lagi. Ubah sedikit kodenya:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>     <span class="n">emptybyte</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>    <span class="n">message</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">()</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="ow">not</span> <span class="n">emptybyte</span><span class="p">):</span>
</span><span class='line'>      <span class="n">chunk</span> <span class="o">=</span> <span class="n">tcpCliSock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="p">(</span><span class="s">&quot;Chunk is&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">print</span> <span class="p">(</span><span class="n">chunk</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">chunk</span> <span class="o">==</span> <span class="n">b</span><span class="s">&#39;&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">emptybyte</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>      <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">message</span> <span class="o">+=</span> <span class="n">chunk</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Catatan Tambahan:</strong> Sebetulnya Anda bisa saja memperbesar jumlah buffernya dan tidak melakukan looping, tetapi itu bukan implementasi yang baik. Meski implementasi chunk di sini lebih baik dibandingkan memperbesar buffer and do nothing, Anda tetap harus memikirkan kondisi terburuk semisal koneksi terputus di tengah jalan. Meski demikian, kita akan mengabaikan hal-hal seperti ini. Kita tidak sedang membuat proxy terbaik, tetapi kita sedang membuat proof of concept dari proxy.</p>

<p>Nanti dulu, kalau kita jalankan proxynya, kita akan terjebak dalam forever loop. NOOOO!!</p>

<pre><code>D:\tmp&gt;python proxy-keren.py
Ready to serve...
Received a connection from: ('127.0.0.1', 53905)
Chunk is
b'GET HTTP://mahas'
Chunk is
b'iswa.cs.ui.ac.id'
Chunk is
b'/ HTTP/1.1\r\nUser'
Chunk is
b'-Agent: curl/7.3'
Chunk is
b'0.0\r\nHost: mahas'
Chunk is
b'iswa.cs.ui.ac.id'
Chunk is
b'\r\nAccept: */*\r\nP'
Chunk is
b'roxy-Connection:'
Chunk is
b' Keep-Alive\r\n\r\n'
</code></pre>

<p>Program berhenti di sana. Kenapa? Karena koneksi socket pasti akan selalu terjalin, kecuali client sudah menerima apa yang dia inginkan. Sedangkan di sini koneksi socket terjalin tetapi si client masih menunggu jawaban dari proxy. &ldquo;Woy gw minta halaman mahasiswa.cs.ui.ac.id donk!&rdquo; Dia akan terus menunggu dan menjalin hubungan hingga proxy memberikan balasannya. Maka dari itu kita terjebak dalam forever loop.</p>

<p>Client selesai memberikan informasi &ldquo;gw butuh apa&rdquo; setelah ada <code>\r\n\r\n</code> sesuai dengan spesifikasi <a href="http://www.apps.ietf.org/rfc/rfc3507.html">RFC 3507</a>. Maka dari itu, mari kita ubah sedikit kodenya:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>emptybyte = False
</span><span class='line'>    message = bytes()
</span><span class='line'>    while (not emptybyte):
</span><span class='line'>      chunk = tcpCliSock.recv(16)
</span><span class='line'>      print("Chunk is ")
</span><span class='line'>      print(chunk)
</span><span class='line'>      message += chunk
</span><span class='line'>      if message.endswith(bytes('\r\n\r\n'.encode('utf-8'))):
</span><span class='line'>        emptybyte = True</span></code></pre></td></tr></table></div></figure>


<p>Hasilnya:</p>

<pre><code>D:\tmp&gt;python proxy-keren.py
Ready to serve...
Received a connection from: ('127.0.0.1', 53948)
b'GET HTTP://mahasiswa.cs.ui.ac.id/ HTTP/1.1\r\nUser-Agent: curl/7.30.0\r\nHost: mahasiswa.cs.ui.ac.id\r\nAccept: */*\r\nProxy-Con
nection: Keep-Alive\r\n\r\n'
b'HTTP://mahasiswa.cs.ui.ac.id/'
Traceback (most recent call last):
  File "proxy-keren.py", line 26, in &lt;module&gt;
    filename = message.split()[1].partition("/")[2]
TypeError: expected bytes, bytearray or buffer compatible object
</code></pre>

<p>Terjadi kesalahan karena pada template asli, program berusaha untuk menganalisis data bytes yang dianggap sebagai string. Mudah sekali, ubah saja menjadi string</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   <span class="n">message_raw</span> <span class="o">=</span> <span class="n">message</span>
</span><span class='line'>  <span class="n">message</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Message asli saya preserve dalam message_raw untuk kebutuhan kita di masa depan. Anda akan mengerti setelah beberapa puluh paragraf ini.</p>

<p>Tentu proxynya masih belum berjalan dengan baik dengan modifikasi ini. Mari kita lanjut ke part 4. What? Part 4? Iya, karena part 3 adalah fungsi membaca dari cache, sedangkan kita belum mengimplementasi fungsi menulis ke cache. Kalau tidak ada yang ditulis, mau baca apa?</p>

<h2>Part 4</h2>

<p>Bagian ini mengatur bagaimana koneksi proxy ke server. Skenario aslinya adalah:</p>

<ul>
<li>Jika cache hit (halaman tersedia di cache), maka baca dari cache (Part 3).</li>
<li>Jika tidak, maka berikan client data dari server (Part 4, ini).</li>
</ul>


<p>Bagaimana kalau kita iseng? Jadi kita lakukan ini:</p>

<ol>
<li>Memberikan seluruh data dari client ke server</li>
<li>Mengembalikan ke client seluruh data yang diterime oleh proxy dari server</li>
</ol>


<p>BRILLIANT IDEA!?</p>

<p>No.</p>

<p>Karena kita harus mengubah baris pertama dari HTTP Request. Tetapi, mari kita coba dengan cara yang naive terlebih dahulu.</p>

<p>Tetapi sebelumnya, saya melihat kejanggalan di template ini. Mari kita lihat isi dari <code>filename</code> dari <code>hostn</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>      <span class="n">hostn</span> <span class="o">=</span> <span class="n">filename</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;www.&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="k">print</span><span class="p">(</span><span class="s">&quot;filename is &quot;</span> <span class="o">+</span> <span class="n">filename</span><span class="p">)</span>
</span><span class='line'>      <span class="k">print</span><span class="p">(</span><span class="s">&quot;hostn is &quot;</span> <span class="o">+</span> <span class="n">hostn</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hasilnya:</p>

<pre><code># window 1
curl -v mahasiswa.cs.ui.ac.id/dadadada/dadskjfkdsljfskdljf

# window 2
...
filename is /mahasiswa.cs.ui.ac.id/dadadada/dadskjfkdsljfskdljf
hostn is /mahasiswa.cs.ui.ac.id/dadadada/dadskjfkdsljfskdljf
</code></pre>

<p>Seriously, hostnamenya adalah URI?</p>

<p>Kalau begitu, gunakan saja URI Parser dari Python.</p>

<p>Import modul berikut:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   <span class="kn">from</span> <span class="nn">urllib.parse</span> <span class="kn">import</span> <span class="n">urlparse</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ubah beberapa bagian di bawah Part 1:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>     <span class="k">print</span> <span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="n">parsed_url</span> <span class="o">=</span> <span class="n">urlparse</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Di part 4 menjadi:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>      <span class="n">hostn</span> <span class="o">=</span> <span class="n">parsed_url</span><span class="o">.</span><span class="n">netloc</span>
</span><span class='line'>      <span class="n">filename</span> <span class="o">=</span> <span class="n">parsed_url</span><span class="o">.</span><span class="n">path</span>
</span><span class='line'>      <span class="n">port</span> <span class="o">=</span> <span class="mi">80</span> <span class="k">if</span> <span class="bp">None</span> <span class="o">==</span> <span class="n">parsed_url</span><span class="o">.</span><span class="n">port</span> <span class="k">else</span> <span class="n">parsed_url</span><span class="o">.</span><span class="n">port</span>
</span><span class='line'>    <span class="n">full_path</span> <span class="o">=</span> <span class="n">hostn</span> <span class="o">+</span> <span class="n">filename</span>
</span><span class='line'>      <span class="n">c</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Jalankan kembali proxynya. Tadaaa!</p>

<pre><code>filename is /dadadada/dadskjfkdsljfskdljf
hostn is mahasiswa.cs.ui.ac.id
</code></pre>

<p>Baiklah, tinggal satu langkah lagi. Mari buat koneksi baru dan mulai segalanya dari sini.</p>

<p><strong>Catatan</strong>: Di sini saya tidak membuat port default adalah 80, karena sangat jelas: akses HTTP belum tentu hanya di port 80. Practically, bisa dimanapun.</p>

<p><strong>Catatan 2</strong>: Saya membuat full_path untuk menyimpan cache. Kita akan gunakan di part selanjutnya.</p>

<h2>Part 5</h2>

<p>Nothing to do here:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   <span class="n">c</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">hostn</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Melakukan sambungan harus dalam blok try-catch.</p>

<h2>Part 5+</h2>

<p>Saya menemukan kesalahan dalam template yang menggunakkan <code>\n\n</code> untuk line ending (yang seharusnya <code>\r\n</code>). Kemudian tidak adanya request header <code>Host</code> yang mana itu dibutuhkan oleh dispatcher / router untuk web worker. Baiklah, mari kita rubah sedikit pada bagian tersebut.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>        <span class="n">strHeader</span> <span class="o">=</span> <span class="nb">str</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;GET &quot;</span> <span class="o">+</span> <span class="n">full_path</span> <span class="o">+</span> <span class="s">&quot; HTTP/1.0</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">strHeader</span> <span class="o">+=</span> <span class="nb">str</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;Host: &quot;</span> <span class="o">+</span> <span class="n">hostn</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">strHeader</span> <span class="o">+=</span> <span class="nb">str</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">fileobj</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">strHeader</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Part 6</h2>

<p>Lakukan hal yang serupa seperti saat kita membaca socket dari client. Tetapi berhubung template kita sudah menggunakkan makefile, jadi kehidupan kita sedikit lebih mudah.</p>

<blockquote><p><strong>Mengapa saat koneksi Client-Proxy kita tidak bisa menggunakkan makefile?</strong> Saya belum tahu. Dugaan saya adalah karena client masih menunggu jawaban, tetapi mungkin Anda tertarik untuk mencoba pendekatan yang lain. Sedangkan di sini yang menjadi client adalah proxy, dan proxy sudah mengirimkan semua informasi header yang sehingga penantian jawabannya adalah suatu kepastian (HTTP Request sudah dikirim semua, tinggal menunggu response).</p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>        <span class="n">tcpCliSock</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">fileobj</span><span class="o">.</span><span class="n">readall</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>Btw, untuk sementara Anda bisa mengcomment bagian tmpFile agar program bisa berjalan dengan baik.</p>

<p>Mari kita coba lihat hasilnya pada kondisi saat ini, yihaa program berjalan sebagaimana mestinya!</p>

<pre><code>C:\Users\Mufid&gt;curl -v mahasiswa.cs.ui.ac.id/dadadada/dadskjfkdsljfskdljf
* Adding handle: conn: 0x982678
* Adding handle: send: 0
* Adding handle: recv: 0
* Curl_addHandleToPipeline: length: 1
* - Conn 0 (0x982678) send_pipe: 1, recv_pipe: 0
* About to connect() to proxy localhost port 8888 (#0)
*   Trying ::1...
* Connection refused
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8888 (#0)
&gt; GET HTTP://mahasiswa.cs.ui.ac.id/dadadada/dadskjfkdsljfskdljf HTTP/1.1
&gt; User-Agent: curl/7.30.0
&gt; Host: mahasiswa.cs.ui.ac.id
&gt; Accept: */*
&gt; Proxy-Connection: Keep-Alive
&gt;
&lt; HTTP/1.1 404 Not Found
&lt; Date: Sun, 08 Dec 2013 02:08:55 GMT
* Server Apache/2.2.22 (Debian) is not blacklisted
&lt; Server: Apache/2.2.22 (Debian)
&lt; Vary: Accept-Encoding
&lt; Content-Length: 313
&lt; Content-Type: text/html; charset=iso-8859-1
&lt; Via: 1.0 mahasiswa.cs.ui.ac.id
&lt; Connection: close
&lt;
&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;
&lt;html&gt;&lt;head&gt;
&lt;title&gt;404 Not Found&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Not Found&lt;/h1&gt;
&lt;p&gt;The requested URL /dadadada/dadskjfkdsljfskdljf was not found on this server.&lt;/p&gt;
&lt;hr&gt;
&lt;address&gt;Apache/2.2.22 (Debian) Server at mahasiswa.cs.ui.ac.id Port 80&lt;/address&gt;
&lt;/body&gt;&lt;/html&gt;
* Closing connection 0
</code></pre>

<h2>Next Up: 404</h2>

<p>Berhubung di tugas disebutkan tidak ada data yang disimpan untuk halaman 404, maka ya cukup jangan simpan jika itu halaman 404. Tetapi saya agak bingung bagaimana mengimplementasi ini. Jadi saya justru melakukan perubahan di Part 6:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;4&#39;</span><span class="p">)):</span>
</span><span class='line'>          <span class="n">tcpCliSock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;HTTP/1.1 404 Not Found&quot;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">))</span>
</span><span class='line'>          <span class="n">tcpCliSock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\0\r\n\r\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">))</span>
</span><span class='line'>          <span class="n">tcpCliSock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>          <span class="k">continue</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bukan hanya 404, melainkan juga 4xx. Hal ini karena status 4xx menandakan kesalahan di permintaan.</p>

<pre><code>C:\Users\Mufid&gt;curl -v mahasiswa.cs.ui.ac.id/dadadada/dadskjfkdsljfskdljf
* Adding handle: conn: 0x1db2678
* Adding handle: send: 0
* Adding handle: recv: 0
* Curl_addHandleToPipeline: length: 1
* - Conn 0 (0x1db2678) send_pipe: 1, recv_pipe: 0
* About to connect() to proxy localhost port 8888 (#0)
*   Trying ::1...
* Connection refused
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8888 (#0)
&gt; GET HTTP://mahasiswa.cs.ui.ac.id/dadadada/dadskjfkdsljfskdljf HTTP/1.1
&gt; User-Agent: curl/7.30.0
&gt; Host: mahasiswa.cs.ui.ac.id
&gt; Accept: */*
&gt; Proxy-Connection: Keep-Alive
&gt;
&lt; HTTP/1.1 404 Not Found
* no chunk, no close, no size. Assume close to signal end
&lt;
* Closing connection 0
</code></pre>

<p>Okay, sudah lebih baik. Mari kita lanjut ke proses caching.</p>

<h2>Next up: POST Request</h2>

<p>Post Request ini sangat tricky. Karena di request post, request body tidak kosong. Mari kita lihat:</p>

<pre><code>mingw $ curl -v mahasiswa.cs.ui.ac.id/~muhammad.mufid/ -XPOST -d ganteng=ya --trace-ascii /dev/stdout
Warning: --trace-ascii overrides an earlier trace/verbose option
== Info: Adding handle: conn: 0x1f739b8
== Info: Adding handle: send: 0
== Info: Adding handle: recv: 0
== Info: Curl_addHandleToPipeline: length: 1
== Info: - Conn 0 (0x1f739b8) send_pipe: 1, recv_pipe: 0
== Info: About to connect() to proxy localhost port 8888 (#0)
== Info:   Trying ::1...
== Info: Connection refused
== Info:   Trying 127.0.0.1...
== Info: Connected to localhost (127.0.0.1) port 8888 (#0)
=&gt; Send header, 229 bytes (0xe5)
0000: POST HTTP://mahasiswa.cs.ui.ac.id/~muhammad.mufid/ HTTP/1.1
003d: User-Agent: curl/7.30.0
0056: Host: mahasiswa.cs.ui.ac.id
0073: Accept: */*
0080: Proxy-Connection: Keep-Alive
009e: Content-Length: 10
00b2: Content-Type: application/x-www-form-urlencoded
00e3:
=&gt; Send data, 10 bytes (0xa)
0000: ganteng=ya
== Info: upload completely sent off: 10 out of 10 bytes
</code></pre>

<p>.. dan &hellip; loop forever.</p>

<p>Ini karena <code>\0\r\n\r\n</code> itu sebagai penanda antara request body dan request header. Maka dari itu, agar loopnya berjalan dengan baik, kita ubah sedikit programnya di bagian loop penerima request: Saya juga menambahkan <code>import re</code> di bagian tas karena kita akan menggunakkan regex agar hidup kita lebih menyenangkan</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>     <span class="n">CHUNK_SIZE</span> <span class="o">=</span> <span class="mi">16</span>
</span><span class='line'>    <span class="n">emptybyte</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>    <span class="n">message</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">()</span>
</span><span class='line'>    <span class="n">content_length</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="ow">not</span> <span class="n">emptybyte</span><span class="p">):</span>
</span><span class='line'>      <span class="n">chunk</span> <span class="o">=</span> <span class="n">tcpCliSock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">CHUNK_SIZE</span><span class="p">)</span>
</span><span class='line'>      <span class="n">message</span> <span class="o">+=</span> <span class="n">chunk</span>
</span><span class='line'>      <span class="c"># Receive everything until the end of the time. No just kidding</span>
</span><span class='line'>      <span class="c"># Until the end of HTTP Request. Please read RFC 3507</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">message</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="n">b</span><span class="s">&#39;</span><span class="se">\r\n\r\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)):</span>
</span><span class='line'>        <span class="n">emptybyte</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>      <span class="c"># Detect end of POST request</span>
</span><span class='line'>      <span class="n">regex_match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&quot;Content-Length: ([0-9]+)&quot;</span><span class="p">,</span> <span class="n">message</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">))</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">regex_match</span><span class="p">):</span>
</span><span class='line'>        <span class="n">content_length</span> <span class="o">=</span> <span class="p">(</span><span class="nb">int</span><span class="p">)</span> <span class="p">(</span><span class="n">regex_match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>        <span class="c"># Check if everything has been send as expected</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">message</span><span class="p">[</span><span class="o">-</span><span class="n">content_length</span><span class="o">-</span><span class="mi">4</span><span class="p">:</span><span class="o">-</span><span class="n">content_length</span><span class="p">]</span> <span class="o">==</span> <span class="n">b</span><span class="s">&#39;</span><span class="se">\r\n\r\n</span><span class="s">&#39;</span><span class="p">):</span>
</span><span class='line'>          <span class="n">emptybyte</span> <span class="o">=</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dan juga jangan lupa agar proxy mengirim ke server juga dengan request body dari client</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>        <span class="n">fileobj</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">makefile</span><span class="p">(</span><span class="s">&#39;rwb&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">request_name</span> <span class="o">=</span> <span class="n">message_raw</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">b</span><span class="s">&#39; &#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="n">rest_of_request</span> <span class="o">=</span> <span class="n">message_raw</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">b</span><span class="s">&#39;</span><span class="se">\r\n</span><span class="s">&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="n">strHeader</span> <span class="o">=</span> <span class="nb">str</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">request_name</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">filename</span> <span class="o">+</span> <span class="s">&quot; HTTP/1.0</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">strHeader</span> <span class="o">+=</span> <span class="n">rest_of_request</span>
</span><span class='line'>        <span class="n">fileobj</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">strHeader</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Part 7: Cache Write</h2>

<p>Caching sederhana saja. Simpan segalanya di file. Tidak perlu membaca body, cukup simpan segala responsenya. Memang ini bukan praktik yang bagus, tetapi kita ingin mendapatkan segalanya serba cepat.</p>

<p>Dan, di sini saya tidak akan membuat hirarki cache dalam bentuk folder. Ini akan menambah kerumitan apabila dia ada parameter GET, atau URL ada informasi yang diencode dalam unicode.</p>

<p>Btw, saya juga tidak menyimpan cache apabila dia bukan method GET. Ya, agar lebih menyenangkan saja. Mosok iya kita ngirim form, terus dibalasnya lewat cache. Ibarat anda upload tugas, kemudian hasilnya selalu upload berhasil padahal sebenarnya telah lewat deadline (hal ini karena proxy membaca dari cache).</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">request_name</span> <span class="o">!=</span> <span class="n">b</span><span class="s">&#39;POST&#39;</span><span class="p">):</span>
</span><span class='line'>          <span class="n">tmpFile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;./&quot;</span> <span class="o">+</span> <span class="n">full_path</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">),</span><span class="s">&quot;wb&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="n">tmpFile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>          <span class="n">tmpFile</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Part 3: Cache Read</h2>

<p>Tidak ada yang istimewa di sini ~</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="c"># Check wether the file exist in the cache</span>
</span><span class='line'>    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">full_path</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">),</span> <span class="s">&quot;rb&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">fileExist</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>    <span class="c"># ProxyServer finds a cache hit and generates a response message</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="n">tcpCliSock</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># Fill in start.</span>
</span><span class='line'>    <span class="c"># Fill in end.</span>
</span><span class='line'>    <span class="k">print</span> <span class="p">(</span><span class="s">&quot;Read from cache&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">tcpCliSock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Done!</h2>

<p>Ya, itu adalah penjelasan mengenai proxy jadi-jadian kita. Tidak sempurna memang, tetapi setidaknya Anda telah mengetahui bagaimana konsep HTTP bekerja.</p>

<h2>Some Trouble(shooting)</h2>

<ul>
<li>Saat menjalankan di linux, socket tidak ditutup secara langsung jika kita mematikan proses pythonnya. Entah itu yang disebut zombie atau apa, tetapi yang pasti saya masih harus <code>kill -9</code> atau <code>killall</code> agar proxynya dapat berjalan setelah sebelumnya dimatikan.</li>
<li>Dalam ngoding, saya kesulitan memahami tipe data Python. Akibatnya, saya menemui beberapa run time error terkait ini. Literal di python didefinisikan sebagai <code>L'sesuatu'</code> dengan <code>L</code> adalah simbol literalnya dan <code>sesuatu</code> adalah datanya. Anda tidak bisa melakukan concat (penggabungan) <code>b'Halo' + ' Dunia'</code>. Alih-alih, Anda harus melakukan penggabungan dalam tipe data yang sama</li>
<li>Program proxy di atas tidak sempurna dan hanya diuji membuka <code>mahasiswa.cs.ui.ac.id/~muhammad.mufid</code>. Saat membuka web-web yang kompleks (misalnya scele), program tidak berjalan dengan baik. Masalah concurrency, i18n, tidak ditangani dengan baik.</li>
<li>Melakukan decode dalam UTF-8 adalah ide yang buruk, tidak semua data diterima dalam UTF-8. Workaroundnya adalah hanya menggunakkan <code>byte</code> dalam setiap urusan pertukaran dan pemrosesan data.</li>
<li>Part 8, seharusnya saya isi apa?</li>
</ul>

]]></content>
  </entry>
  
</feed>
